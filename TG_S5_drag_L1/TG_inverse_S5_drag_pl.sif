!---LUA BEGIN
! assert(loadfile('../COLD.lua'))()
! assert(loadfile('../PIG.lua'))()
!---LUA END

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
$name="TG_drag_0629_L1"

! The total cost function to minimize is J=J_u + LambdaReg * Jreg
! where J_u=velocity error; Jreg=regularisation (smoothness)
$LambdaReg=1.0e1

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Header
  Mesh DB "." "#meshdb#"
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Constants
  water density = Real #rhoo
  Sea Spring Timestep Size = Real 0.0011
  Buoyancy Use Basal Melt = Logical False
  sea level = Real #zsl
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Simulation
  Coordinate System  = Cartesian 3D 
  Simulation Type = Steady State
 
  !Timestep size = Real 0.0011 !corresponds to restart position

  Extruded Mesh Levels = #MLEV
  Extruded Mesh Density = Variable Coordinate 1
    Real MATC "1.0 + 2.5 * tx[0]"

  Steady State Min Iterations = #IMIN
  Steady State Max Iterations = #IMAX

  OutPut File = "$name$_.result"
  Output Intervals = 5

  Restart File = "../TG_S4_mu/results/TG_invmu_0625_Run1_.result"
  Restart Position = 0

  Restart Before Initial Conditions = logical True
  Initialize Dirichlet Conditions = Logical False

  max output level = 5
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Main ice body
Body 1
  Equation = 1
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

! lower surface
Body 2
  Equation = 2
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

! upper surface
Body 3
  Equation = 3
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Initial Condition 1
 
 ! alpha = Equals beta !Real -3.0

End
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Body Force 1
  Flow BodyForce 1 = Real 0.0                          
  Flow BodyForce 2 = Real 0.0                          
  Flow BodyForce 3 = Real #gravity

  !# Cost not computed if H<=Hmin
  CostV Passive = Variable thickness
    Real procedure "USFs" "PassiveCond_H"
  Passive Element Min Nodes = Integer 3
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! ice material properties in MPa - m - a system 
Material 1
  sea level = Real #zsl

  Density = Real #rhoi

  Viscosity Model = String "power law"
  Viscosity Exponent = Real #m

! Viscosity defined as mu*EF^2 to ensure >0 and to
! use mu as initial guess (here EF is an enhancement factor)
  Viscosity = Variable bottom EF, mu
    REAL procedure "ElmerIceUSF" "Asquare_Scaled"

  Viscosity derivative = Variable "bottom EF", mu
    REAL procedure "ElmerIceUSF" "Asquare_d_Scaled"

  Critical Shear Rate = Real 1.0e-10
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Solver 1
  Exec Solver = Before simulation 
  Equation = "MapCoordinate_init"
  Procedure = "StructuredMeshMapper" "StructuredMeshMapper"
  Active Coordinate = Integer 3

  Top Surface Variable Name = String "FS upper"
  Bottom Surface Variable Name = String "FS lower"

  Dot Product Tolerance = Real 0.001
  Displacement Mode = Logical False
  Correct Surface = Logical True
  Minimum Height = Real #MINH
End

!!!! Navier-Stokes Solution
Solver 2
  Equation = "Navier-Stokes"  
  Stabilization Method = String Stabilized
  Flow Model = Stokes

  Optimize Bandwidth = True

  !mandatory to save bulk stiffness matrix
  Calculate Loads = Logical True

  Linear System Solver = Direct
  Linear System Direct Method =  mumps
  Mumps percentage increase working space = Integer 60

  Nonlinear System Max Iterations = Integer 50
  Nonlinear System Convergence Tolerance  = Real 1.0e-7
  Nonlinear System Newton After Iterations = 50
  Nonlinear System Newton After Tolerance = 1.0e-5
  Nonlinear System Reset Newton = Logical True
 ! Nonlinear System Relaxation Factor = 0.4
  Nonlinear System Abort Not Converged = Logical True

  Steady State Convergence Tolerance = Real 1.0e-10

  ! Timings of the solver
  Linear System Timing = Logical True
  Linear System Timing Cumulative = Logical True
  Solver Timing = Logical True
  Solver Timing Cumulative = Logical True

! square root of the slip coef
  Exported Variable 1 = alpha
  Exported Variable 1 DOFS = Integer 1
! derivative of the cost fn wr to alpha
  Exported Variable 2 = -nooutput DJDBeta
  Exported Variable 2 DOFS = Integer 1
! value of the cost function
  Exported Variable 3 = -global CostValue
  Exported Variable 3 DOFS = Integer 1
! Variable used to force the adjoint system/update in CostSolver
  Exported Variable 4 = -nooutput Velocityb
  Exported Variable 4 DOFs = Integer 4
  Exported Variable 5 = beta
  Exported Variable 5 DOFs = Integer 1
  !Exported Variable 6 = TemperatureRel
  !Exported Variable 6 DOFs = Integer 1
  !Exported Variable 7 = Mu
  !Exported Variable 7 DOFs = Integer 1
  !Exported Variable 8 = bottom EF
  !Exported Variable 8 DOFs = Integer 1
  !Exported Variable 9 = EF
  !Exported Variable 9 DOFs = Integer 1
End


!!! Compute Cost function
!!!!!!!!   Has to be run before the Adjoint Solver as adjoint forcing is computed here !!!!!
Solver 3
  Equation = "Cost"
  Variable = -nooutput "CostV"
  Variable DOFs = 1
  procedure = "ElmerIceSolvers" "Adjoint_CostDiscSolver"

  Optimize Bandwidth = logical false

  Problem Dimension = Integer 2 ! I think this is not used after all...
  Cost Variable Name = String "CostValue"  ! Name of Cost Variable
! save the cost as a function of iterations (iterations,Cost,rms=sqrt(2*Cost/Ndata)
  Cost Filename = File "Cost_U_$name$.dat"
  Lambda = Real 1.0

  Observed Variable Dimension = Integer 2
  Observed Variable Name = String "Flow Solution"
 ! netcdf with vx, vy
   Observation File Name = File "#VELOCITY_DATA#"
   X Var Name = String x_coords
   y Var Name = String y_coords
 ! 
   Save used data = logical False
end

!!!!  Adjoint Solution
Solver 4
  Equation = "Adjoint"
  procedure = "ElmerIceSolvers" "Adjoint_LinearSolver"

  Variable = -nooutput Adjoint
  Variable Dofs = 4

!Name of the flow solution solver
!  Direct Solver Equation Name = string "Stokes-vec"
  Direct Solver Equation Name = string "Navier-Stokes"

  Linear System Solver = Direct
  Linear System Direct Method = mumps
  mumps percentage increase working space = integer 50
End

!!!!!!!!!!!!!!!!!!!!!!!!
!!  Derivative / beta
!!  body 2 (lower surface)
!!!!!!!!!!!!!!!!!!!!!!!!
Solver 5
  Equation = "DJDBeta"
  procedure = "ElmerIceSolvers" "AdjointStokes_GradientBetaSolver"

  Flow Solution Name = String "Flow Solution"
  Adjoint Solution Name = String "Adjoint"
  Gradient Variable Name = String "DJDbeta"

!! Exported Variables
  Exported Variable 1 = DJDbeta
End

Solver 6
  Equation = "DJDBeta_Reg"

  Variable = -nooutput "DJDBReg"
  Variable DOFs = 1

  procedure = "ElmerIceSolvers" "Adjoint_CostRegSolver"
  Optimize Bandwidth = logical false

  Problem Dimension = Integer 2
  Cost Filename = File "CostReg_$name$.dat"
  Optimized Variable Name = String "alpha"
  Gradient Variable Name = String "DJDBeta"
  Cost Variable Name = String "CostValue"
  Lambda = Real $LambdaReg
  Reset Cost Value = Logical False
  A priori Regularisation = Logical False
end

!!!!! Optimization procedure 
Solver 7
  Exec Solver = after Timestep

  Equation = "Optimize_m1qn3"
  procedure = "ElmerIceSolvers" "Optimize_m1qn3Parallel"

  Cost Variable Name = String "CostValue"
  Optimized Variable Name = String "alpha"
  Gradient Variable Name = String "DJDBeta"
  gradient Norm File = String "GradientNormAdjoint_$name$.dat"

  !Note: it may be beneficial to set this to True, which scales
  !the gradient by 1/boundary_weights. With this set to false,
  !larger elements produce larger gradients.
  Mesh Independent = Logical False 

! M1QN3 Parameters
  M1QN3 dxmin = Real 1.0e-10
  M1QN3 epsg = Real  1.e-6
  M1QN3 niter = Integer #IMAX
  M1QN3 nsim = Integer #IMAX
  M1QN3 impres = Integer 5
  M1QN3 DIS Mode = Logical False
  M1QN3 df1 = Real 0.5
  M1QN3 normtype = String "dfn"
  M1QN3 OutputFile = File  "M1QN3_$name$.out"
  M1QN3 ndz = Integer 20
end

Solver 8
  Equation = "Emergence velocity"
  Procedure = "ElmerIceSolvers" "GetEmergenceVelocity"
  Variable = -dofs 1 EmergenceVelocity
End

Solver 9
!  Exec Solver = String "never"
  Exec Solver = String "after saving"
  Equation = String "ResultOutput"
  Procedure = File "ResultOutputSolve" "ResultOutputSolver"
  Save Geometry Ids = Logical True
  Output File Name = File $name
  Output Format = String "vtu"
  Output Directory = File #outdir
  Vtu Format = Logical True
  Save Geometry Ids = Logical True
  Scalar Field 1  = EmergenceVelocity
  Scalar Field 2  = alpha
  Scalar Field 3  = beta
  Scalar Field 4  = bed
  Scalar Field 5  = height
  Scalar Field 6  = depth
  Scalar Field 7  = FS upper
  Scalar Field 8  = FS lower
  Scalar Field 9 = groundedmask
  Scalar Field 10 = vx
  Scalar Field 11 = vy
  Vector Field 1  = velocity 
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Equation 1
  Active Solvers (4) = 1 2 4 9 
  Flow Solution Name = String "Flow Solution"
  Convection = Computed 
  NS Convect= False
End

Equation 2
  Active Solvers (3)=  5 6 7 
  Convection = Computed 
  Flow Solution Name = String "Flow Solution"
  Friction Load Mask = String "GroundedMask" 
End

Equation 3
  Active Solvers (2)=  3 8 
  Convection = Computed 
  Flow Solution Name = String "Flow Solution"
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Boundary Condition 1
  Name = "inland_boundary"
  Target Boundaries(1)  = 1

  Normal-Tangential Velocity = Logical True
  Slip Coefficient 1 = Real 10.0
  Slip Coefficient 2 = Real 0.001
  Slip Coefficient 3 = Real 0.001
End

Boundary Condition 2
  Name = "calving_front"
  Target Boundaries(1) = 2

 Flow Force BC = logical True
 External Pressure = variable coordinate 3
   Real Procedure "ElmerIceUSF" "SeaPressure"
 
 Compute Sea Pressure = Logical True
End

Boundary Condition 3
  !Name= "bed" mandatory to compute regularistaion term of the cost function (int (dbeta/dx) 2)
  Name= "bed" 
  Body ID = 2

  Test Contact Tolerance = real 1.0e-10 #from SR
  Mass Consistent Normals = logical TRUE 

  Normal-Tangential Velocity = Logical True  

  Velocity 1 = Real 0.0e0
  Velocity 1 Condition = Variable GroundedMask
    Real MATC "tx + 0.5"

  FS Lower = Equals bed  #likely unnecessary, from SR
  FS Lower condition = Variable GroundedMask
     Real MATC "tx + 0.5"

  Flow Force BC = Logical True #from SR

  Slip Coefficient 2 = Variable alpha, GroundedMask
    REAL procedure "ElmerIceUSF" "TenPowerA_masked" 
  Slip Coefficient 3 = Variable alpha, GroundedMask
    REAL procedure "ElmerIceUSF" "TenPowerA_masked"
  Slip Coefficient derivative = Variable alpha, GroundedMask
    REAL procedure "ElmerIceUSF" "TenPowerA_d_Masked"

  External Pressure = Variable Coordinate 3
    Real lua "sw_pressure(tx[0])" 
   
  Slip Coefficient 1 = Variable Coordinate 3
    Real Procedure "ElmerIceUSF" "SeaSpring" 
  Compute Sea Spring = Logical True
End

! Upper Surface
Boundary Condition 4
  !Name= "Surface" mandatory to compute cost function
  Name= "Surface" 
  Body Id = 3
  Normal-Tangential Velocity = Logical True 
End 