	
!---LUA BEGIN
! assert(loadfile('../COLD.lua'))()
! assert(loadfile('../PIG.lua'))()
!---LUA END

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
$name="TG_S3_ViscDrag"

! The total cost function to minimize is J=J_u + LambdaReg * Jreg
! where J_u=velocity error; Jreg=regularisation (smoothness)
$LambdaReg=1.0e5


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Header
  Mesh DB "." "#meshdb#"
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Constants
  water density = Real #rhoo
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Simulation
  Coordinate System  = Cartesian 3D 
  Simulation Type = Steady State

  Extruded Mesh Levels = #MLEV
  Extruded Mesh Density = Variable Coordinate 1
    Real MATC "1.0 + 2.5 * tx[0]"

  Steady State Min Iterations = #IMIN
  Steady State Max Iterations = #IMAX

  OutPut File = "$name$_.result"
  Output Intervals = 1

!  Restart File = "../../PIG_S2_nt128/mesh2D_PIG3/SurfRelax.result"
!  Restart File = "../../PIG_S3f_L5/mesh2D_PIG3/PIG_S3f_L5_.result"
!  Restart File = "../../PIG_S4h_L5/mesh2D_PIG3/PIG_S4h_L5_.result"

  Restart File = "../TG_S2/results/TG_dV_GEF.result"

!  Restart Variable 1  = String alpha
!  Restart Variable 2  = String ef
!  Restart Variable 3  = String bmb
  Restart Variable 1  = String groundedmask
  Restart Variable 2 = String temperature
  Restart Variable 3  = String pressure
!  Restart Variable 7  = String viscosity
  Restart Variable 4  = String velocity
!  Restart Variable 9  = String bottom ef
  Restart Variable 5 = String FS upper
  Restart Variable 6 = String FS lower
!  Restart Variable 12 = String smbref
!  Restart Variable 13 = String q_geo
  Restart Variable 7 = String thickness
  Restart Variable 8 = String proj_beta

  Restart Before Initial Conditions = logical True
  Initialize Dirichlet Conditions = Logical False

  max output level = 5
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Main ice body
Body 1
  Equation = 1
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

! lower surface
Body 2
  Equation = 2
  Body Force = 1
  Material = 1
  Initial Condition = 1
End
! upper surface

Body 3
  Equation = 3
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Initial Condition 1

  TemperatureRel = Variable Temperature, Pressure
    Real lua "relativetemp(tx[0],tx[1])"
    
  Mu = Variable TemperatureRel
    Real lua "initMu(tx[0])"

  EF = Real 1.0     ! viscosity enhancement factor
  bottom EF = Real 1.0
  
  !alpha = Equals beta !In drag only inversion
  !alpha = Real -3.0 !In mu only inversion
  beta = Real -3.0 ! Equals alpha ! alpha is drag coeff from restart 
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Body Force 1
  Flow BodyForce 1 = Real 0.0                          
  Flow BodyForce 2 = Real 0.0                          
  Flow BodyForce 3 = Real #gravity

  !# Cost not computed if H<=Hmin
  CostV Passive = Variable thickness
    Real procedure "USFs" "PassiveCond_H"
  Passive Element Min Nodes = Integer 3
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! ice material properties in MPa - m - a system 
Material 1
  sea level = Real #zsl

  Density = Real #rhoi

  Viscosity Model = String "power law" !tried glen b/c was in drag only inversion, but error thrown
  Viscosity Exponent = Real 0.333 !Would be #n with glen. m = 1/n, n = 3
 
! Viscosity defined as mu*EF^2 to ensure >0 and to 
! use mu as initial guess (here EF is an enhancement factor)
  Viscosity = Variable bottom EF, mu
    REAL procedure "ElmerIceUSF" "Asquare_Scaled"

  Viscosity derivative = Variable "bottom EF", mu
    REAL procedure "ElmerIceUSF" "Asquare_d_Scaled"

  Critical Shear Rate = Real 1.0e-10

  !Should this section be included?
  !Limit Temperature = Real -10.0
  !Rate Factor 1 = Real #A1
  !Rate Factor 2 = Real #A2
  !Activation Energy 1 = Real #Q1
  !Activation Energy 2 = Real #Q2
  !Glen Enhancement Factor = Real 1.0
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Solver 1
  Exec Solver = Before simulation
  Equation = "MapCoordinate"
  Procedure = "StructuredMeshMapper" "StructuredMeshMapper"
  Active Coordinate = Integer 3

  Top Surface Variable Name = String "FS upper"
  Bottom Surface Variable Name = String "FS lower"

  Dot Product Tolerance = Real 0.001
  Displacement Mode = Logical False
  Correct Surface = Logical True
  Minimum Height = Real #MINH
End

Solver 2
  Exec Solver = before Timestep
  Equation = "ProjectEF"
  Procedure = File "StructuredProjectToPlane" "StructuredProjectToPlane"

  Active Coordinate = Integer 3

  Variable 1 = String "EF"
  Operator 1 = String bottom
end

!!!! Navier-Stokes Solution
Solver 3
!  Exec solver = never
  Equation = "Navier-Stokes"  
  Stabilization Method = String Stabilized
  Flow Model = Stokes

  Optimize Bandwidth = True

  !mandatory to save bulk stiffness matrix
  Calculate Loads = Logical True

  Linear System Solver = Direct
  Linear System Direct Method = mumps
  Mumps percentage increase working space = Integer 200

!  Nonlinear System Max Iterations = Integer 100
  Nonlinear System Max Iterations = Integer 40
  Nonlinear System Convergence Tolerance  = Real 1.0e-7
  Nonlinear System Newton After Iterations = 50
  Nonlinear System Newton After Tolerance = 1.0e-5
  Nonlinear System Reset Newton = Logical True

  Steady State Convergence Tolerance = Real 1.0e-10

  ! Timings of the solver
  Linear System Timing = Logical True
  Linear System Timing Cumulative = Logical True
  Solver Timing = Logical True
  Solver Timing Cumulative = Logical True

  Exported Variable 1 = alpha
  Exported Variable 1 DOFS = Integer 1
  Exported Variable 2 = -global CostValue
  Exported Variable 2 DOFS = Integer 1
! Variable used to force the adjoint system/update in CostSolver
  Exported Variable 3 = -nooutput Velocityb
  Exported Variable 3 DOFs = Integer 4
  Exported Variable 4 = mu
  Exported Variable 4 DOFS = Integer 1
  Exported Variable 5 = TemperatureRel ! Temperature relative to pressure melting 
  Exported Variable 5 DOFS = Integer 1
End

!!! Compute Cost function
!!!!!!!!   Has to be run before the Adjoint Solver as adjoint forcing is computed here !!!!!
Solver 4
!  Exec solver = never
  Equation = "Cost"
  Variable = -nooutput "CostV"
  Variable DOFs = 1
  procedure = "ElmerIceSolvers" "Adjoint_CostDiscSolver"

  Optimize Bandwidth = logical false

  Cost Variable Name = String "CostValue"  ! Name of Cost Variable
! save the cost as a function of iterations (iterations,Cost,rms=sqrt(2*Cost/Ndata)
  Cost Filename = File "Cost_U_$name$.dat"
  Lambda = Real 1.0

  Observed Variable Dimension = Integer 2
  Observed Variable Name = String "Flow Solution"
 ! netcdf with vx, vy
  Observation File Name = File "#VELOCITY_DATA#"
  X Var Name = String x_coords
  y Var Name = String y_coords
 ! 
  Save used data = logical False
end

!!!!  Adjoint Solution
Solver 5
!  Exec solver = never
  Equation = "Adjoint"
  procedure = "ElmerIceSolvers" "Adjoint_LinearSolver"

  Variable = -nooutput Adjoint
  Variable Dofs = 4

  Direct Solver Equation Name = string "Navier-Stokes"

  Linear System Solver = Direct
  Linear System Direct Method = mumps
  mumps percentage increase working space = integer 50
End
                                                                                
!!!!!  Compute Derivative of Cost function / Enhancement factor
Solver 6
  Equation = "DJDEF"
  Variable = "DJDEF"
  Variable DOFs = 1
  procedure = "ElmerIceSolvers" "AdjointStokes_GradientMuSolver"

  Flow Solution Name = String "Flow Solution"
  Adjoint Solution Name = String "Adjoint"
  Optimized Variable Name = String "bottom EF"
  Gradient Variable Name = String "DJDEF"
end

Solver 7
!  Exec solver = never
  Equation = "SumDJDEF"
  Procedure = File "StructuredProjectToPlane_local" "StructuredProjectToPlane"

  Active Coordinate = Integer 3
  Project To Bottom = Logical True

  Variable 1 = String DJDEF
  Operator 1 = String sum
end

Solver 8
  Equation = "DJDEF_Reg"

  procedure = "ElmerIceSolvers" "Adjoint_CostRegSolver"

  Problem Dimension = Integer 2
  Cost Filename = File "CostReg_$name$.dat"
  Optimized Variable Name = String "EF"
  Gradient Variable Name = String "sum DJDEF"
  Cost Variable Name = String "CostValue"
  Lambda = Real $LambdaReg
  Reset Cost Value = Logical False
  A priori Regularisation = Logical False

  ! The optimised variable is a vector made of EF and beta (beta is drag coef)
  Exported Variable 1 = Var[EF:1 beta:1]
  Exported Variable 1 DOFs = 2
  ! Gradient of the cost function w.r.t. EF and beta 
  Exported Variable 2 = DJDVar[sum DJDEF:1 DJDBeta:1]
  Exported Variable 2 DOFs = 2
end

Solver 9
  Equation = "DJDBeta"
  procedure = "ElmerIceSolvers" "AdjointStokes_GradientBetaSolver"

  Flow Solution Name = String "Flow Solution"
  Adjoint Solution Name = String "Adjoint"
  Gradient Variable Name = String "DJDbeta"

  !Exported Variable 1 = DJDbeta !SHOULD THIS BE COMMENTED OUT?
end

Solver 10 
  Equation = "DJDBeta_Reg"

  procedure = "ElmerIceSolvers" "Adjoint_CostRegSolver"

  Cost Filename = File "CostReg_$name$.dat"
  Optimized Variable Name = String "Beta"
  Gradient Variable Name = String "DJDBeta"
  Cost Variable Name = String "CostValue"
  Lambda = Real $LambdaReg
  Reset Cost Value = Logical False  !=> DJDapha already initialized in solver DJDBeta; switch off initialisation to 0 at the beginning of this solver
  A priori Regularisation = Logical False
End

Solver 11
  Exec Solver = after Timestep

  Equation = "Optimize_m1qn3"
  procedure = "ElmerIceSolvers" "Optimize_m1qn3Parallel"

  Cost Variable Name = String "CostValue"

!  Optimized Variable Name = String "beta"
!  Gradient Variable Name = String "DJDbeta"
!  Optimized Variable Name = String "EF"
!  Gradient Variable Name = String "sum DJDEF"
  Optimized Variable Name = String "var"
  Gradient Variable Name = String "DJDvar"
  gradient Norm File = String "GradientNormAdjoint_$name$.dat"

  !Note: it may be beneficial to set this to True, which scales
  !the gradient by 1/boundary_weights. With this set to false,
  !larger elements produce larger gradients.
  Mesh Independent = Logical False

! M1QN3 Parameters
  M1QN3 dxmin = Real 1.0e-10
  M1QN3 epsg = Real  1.e-6
  M1QN3 niter = Integer #IMAX
  M1QN3 nsim = Integer #IMAX
  M1QN3 impres = Integer 5
  M1QN3 DIS Mode = Logical False
  M1QN3 df1 = Real 0.5
  M1QN3 normtype = String "dfn"
  M1QN3 OutputFile = File  "M1QN3_$name$.out"
  M1QN3 ndz = Integer 20
end

Solver 12
  Exec Solver = String "after saving"
  Equation = String "ResultOutput"
  Procedure = File "ResultOutputSolve" "ResultOutputSolver"
  Save Geometry Ids = Logical True
  Output File Name = File $name
  Output Format = String "vtu"
  Output Directory = File #outdir
  Vtu Format = Logical True
End


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Equation 1
  Active Solvers (7) = 1 2 3 5 6 7 12
  NS Convect= False
End

Equation 2
  Active Solvers (4) = 8 9 10 11
End

Equation 3
  Active Solvers (1) = 4
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Boundary Condition 1
  Name = "Side Walls" ! should be calving front actually...
  Target Boundaries(1) = 1

 Flow Force BC = logical True
 External Pressure = variable coordinate 3
   Real Procedure "ElmerIceUSF" "SeaPressure"

 Compute Sea Pressure = Logical True
End

Boundary Condition 2
  Name = "inland_boundary"
  Target Boundaries(1)  = 2

  Normal-Tangential Velocity = Logical True
  Slip Coefficient 1 = Real 10.0
  Slip Coefficient 2 = Real 0.001
  Slip Coefficient 3 = Real 0.001
End

Boundary Condition 3
  !Name= "bed" mandatory to compute regularistaion term of the cost function (int (dbeta/dx) 2)
  Name = "bed"
  Body ID = Integer 2

  Mass Consistent Normals = logical True

  Normal-Tangential Velocity = Logical True  

  Velocity 1 = Real 0.0e0

  Slip Coefficient 2 = Variable beta, GroundedMask
     REAL procedure "ElmerIceUSF" "TenPowerA_masked"

  Slip Coefficient 3 = Variable beta, GroundedMask
     REAL procedure "ElmerIceUSF" "TenPowerA_masked"

  Slip Coefficient derivative = Variable beta, GroundedMask
     REAL procedure "ElmerIceUSF" "TenPowerA_d_Masked"

End

! Upper Surface
Boundary Condition 4
  !Name= "Surface" mandatory to compute cost function
  Name = "Surface"
  Body Id = 3

End 
