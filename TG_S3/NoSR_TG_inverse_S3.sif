!---LUA BEGIN
! assert(loadfile('../COLD.lua'))()
! assert(loadfile('../PIG.lua'))()
!---LUA END

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
$name="TG_S3_0511_Run2"

! The total cost function to minimize is J=J_u + LambdaReg * Jreg
! where J_u=velocity error; Jreg=regularisation (smoothness)
$LambdaReg=1.0e5

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Header
  Mesh DB "." "#meshdb#"
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Constants
  water density = Real #rhoo
  !Sea Spring Timestep Size = Real 0.0027
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Simulation
  Coordinate System  = Cartesian 3D 
  Simulation Type = Steady
 
  !Timestep Intervals = 5
  !Timestep Size = Variable "Timestep"
  !   Real lua "timeStepCalc(tx[0])"
  TimeStep Size = 0.0027 !1d
  Output Intervals = 1

  Extruded Mesh Levels = #MLEV
  Extruded Mesh Density = Variable Coordinate 1
    Real MATC "1.0 + 2.5 * tx[0]"

  Steady State Min Iterations = #IMIN
  Steady State Max Iterations = #IMAX

  OutPut File = "$name$_.result"
  Output Intervals = 1

  Restart File = "../TG_S2/results/TG_SR_GEF_SSTS_WD.result"
  !Restart File = "../TG_S1p5/results/readnc_tempc_transient.result"
  Restart Position = 63

  Restart Before Initial Conditions = logical True
  Initialize Dirichlet Conditions = Logical False

  max output level = 8
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Main ice body
Body 1
  Equation = 1
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

! lower surface
Body 2
  Equation = 2
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

! upper surface
Body 3
  Equation = 3
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Initial Condition 1
 
  Temperature = Variable temp_c
    Real lua "K2C(tx[0])"  

  alpha = Equals proj_beta !Real -3.0

  FS lower = Variable proj_thickness, proj_bed
    Real lua "floatLower(tx[0],tx[1])"
  FS upper = Variable proj_thickness, proj_bed
    Real lua "floatUpper(tx[0],tx[1])"

  dvu_ext = Variable proj_dvu 1, proj_dvu 2
    Real lua "math.sqrt(tx[0]*tx[0] + tx[1]*tx[1] )"

End
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Body Force 1
  Flow BodyForce 1 = Real 0.0                          
  Flow BodyForce 2 = Real 0.0                          
  Flow BodyForce 3 = Real #gravity

  !# Cost not computed if H<=Hmin
  CostV Passive = Variable proj_thickness
    Real procedure "USFs" "PassiveCond_H"
  Passive Element Min Nodes = Integer 3
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! ice material properties in MPa - m - a system 
Material 1
  sea level = Real 0.0

  Density = Real #rhoi
  !Cauchy = Logical TRUE !Didn't include this 

  Viscosity Model = String "glen"
  Viscosity = 1.0 ! Dummy but avoid warning output
  Glen Exponent = Real 3.0

  Glen Enhancement Factor = Variable dvu_ext
    Real lua "IfThenElse((tx[0] < 0.3), 1.0,10.0)"
  !Glen Enhancement Factor = Real "Glen Enhancement Factor"

  !Temperature Field Variable = String "Temperature"
  Relative Temperature = Variable Temperature, Pressure
    Real lua "relativetemp(tx[0],tx[1])"

  Limit Temperature = Real #Tlim
  Rate Factor 1 = Real #A1
  Rate Factor 2 = Real #A2
  Activation Energy 1 = Real #Q1
  Activation Energy 2 = Real #Q2
  !Glen Enhancement Factor = Real 1.0
  Critical Shear Rate = Real 1.0e-10
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Solver 1
  Equation = "DummyRoutine"
  Procedure = File "DummySolver" "DummySolver"
  Exec Solver = "Before all"
  Variable = -nooutput dummyV
  Variable Output = False
  Exported Variable 1 = -dofs 1 "proj_bed
  Exported Variable 2 = -dofs 1 "proj_beta"
  Exported Variable 3 = -dofs 2 "proj_dvu"
  Exported Variable 4 = -dofs 1 "proj_thickness"
  Exported Variable 5 = -dofs 1 "proj_vobs"
  Exported Variable 6 = -dofs 1 "proj_vx"
  Exported Variable 7 = -dofs 1 "proj_vy"
  Exported Variable 8 = -dofs 1 "temp_c"
End

Solver 2
  Exec Solver = Before Simulation 
  Equation = "MapCoordinate_init"
  Procedure = "StructuredMeshMapper" "StructuredMeshMapper"
  Active Coordinate = Integer 3

  Top Surface Variable Name = String "FS upper"
  Bottom Surface Variable Name = String "FS lower"

  Dot Product Tolerance = Real #DPtol
  Displacement Mode = Logical False
  Correct Surface = Logical True
  Minimum Height = Real #MINH
End

Solver 3
  Exec Solver = "never"
  !Exec Solver = "Before Timestep"
  Equation = "MapCoordinate"
  Procedure = "StructuredMeshMapper" "StructuredMeshMapper"

  Active Coordinate = Integer 3
  Dot Product Tolerance = Real #DPtol
  Minimum Height = Real #MINH
  Top Surface Variable Name = String FS upper
  Bottom Surface Variable Name = String FS lower
  Correct Surface = Logical True
End

Solver 4
  Equation = "HeightDepth"
  Exec Solver = "Never"
  Procedure = "StructuredProjectToPlane" "StructuredProjectToPlane"
  Active Coordinate = Integer 3
  Operator 1 = depth
  Operator 2 = height
End

Solver 5
  Exec Solver = "never" !Was before simulation
  Equation = "GroundedMask"
  Procedure = "ElmerIceSolvers" "GroundedSolver"
  Variable = GroundedMask
  Variable DOFs = 1
  Toler = Real #GLTolerance
  Bedrock Variable = String "proj_bed" !NOT IN TG_relax_S2.sif but probably needed
End

Solver 6
  Exec solver = "never"
  Equation = "Normal Vector"
  Procedure = "ElmerIceSolvers" "ComputeNormalSolver"
  Variable = "Normal Vector"
  Variable DOFs = 3
  ComputeAll = Logical True
  Optimize Bandwidth = Logical False
End

Solver 7
  Exec solver = never
  Equation = Fw
  Procedure = "ElmerIceSolvers" "GetHydrostaticLoads"
  Variable = Fw[Fwater:3]
  Variable DOFs = 3
End

!!!! Navier-Stokes Solution
Solver 8
  Equation = "Navier-Stokes"  
  Stabilization Method = String Stabilized
  Flow Model = Stokes

  Optimize Bandwidth = True

  !mandatory to save bulk stiffness matrix
  Calculate Loads = Logical True

  Linear System Solver = Direct
  Linear System Direct Method =  mumps
  Mumps percentage increase working space = Integer 60

  Nonlinear System Max Iterations = Integer 50
  Nonlinear System Convergence Tolerance  = Real 1.0e-5
  Nonlinear System Newton After Iterations = 50
  Nonlinear System Newton After Tolerance = 1.0e-5
  Nonlinear System Reset Newton = Logical True
!  Nonlinear System Relaxation Factor = 0.5

  Steady State Convergence Tolerance = Real 1.0e-10

  ! Timings of the solver
  Linear System Timing = Logical True
  Linear System Timing Cumulative = Logical True
  Solver Timing = Logical True
  Solver Timing Cumulative = Logical True

! square root of the slip coef
  Exported Variable 1 = alpha
  Exported Variable 1 DOFS = Integer 1
! derivative of the cost fn wr to alpha
  Exported Variable 2 = -nooutput DJDBeta
  Exported Variable 2 DOFS = Integer 1
! value of the cost function
  Exported Variable 3 = -global CostValue
  Exported Variable 3 DOFS = Integer 1
! Variable used to force the adjoint system/update in CostSolver
  Exported Variable 4 = -nooutput Velocityb
  Exported Variable 4 DOFs = Integer 4
  Exported Variable 5 = proj_beta
  Exported Variable 5 DOFs = Integer 1
  Exported Variable 6 = dvu_ext
  Exported Variable 6 DOFS = Integer 1
  Exported Variable 7 = Glen Enhancement Factor
  Exported Variable 7 DOFS = Integer 1
  !Exported Variable 8 = -dofs 1 "FS upper"
  !Exported Variable 9 = -dofs 1 "FS lower"
  !Exported Variable 10 = -dofs 1 "Temperature"
End


!!! Compute Cost function
!!!!!!!!   Has to be run before the Adjoint Solver as adjoint forcing is computed here !!!!!
Solver 9
  Equation = "Cost"
  Variable = -nooutput "CostV"
  Variable DOFs = 1
  procedure = "ElmerIceSolvers" "Adjoint_CostDiscSolver"

  Optimize Bandwidth = logical false

  Problem Dimension = Integer 2 ! I think this is not used after all...
  Cost Variable Name = String "CostValue"  ! Name of Cost Variable
! save the cost as a function of iterations (iterations,Cost,rms=sqrt(2*Cost/Ndata)
  Cost Filename = File "Cost_U_$name$.dat"
  Lambda = Real 1.0

  Observed Variable Dimension = Integer 2
  Observed Variable Name = String "Flow Solution"
 ! netcdf with vx, vy
   Observation File Name = File "#VELOCITY_DATA#"
   X Var Name = String x_coords
   y Var Name = String y_coords
 ! 
   Save used data = logical False
end

!!!!  Adjoint Solution
Solver 10
  Equation = "Adjoint"
  procedure = "ElmerIceSolvers" "Adjoint_LinearSolver"

  Variable = -nooutput Adjoint
  Variable Dofs = 4

!Name of the flow solution solver
!  Direct Solver Equation Name = string "Stokes-vec"
  Direct Solver Equation Name = string "Navier-Stokes"

  Linear System Solver = Direct
  Linear System Direct Method = mumps
  mumps percentage increase working space = integer 50
End

!!!!!!!!!!!!!!!!!!!!!!!!
!!  Derivative / beta
!!  body 2 (lower surface)
!!!!!!!!!!!!!!!!!!!!!!!!
Solver 11
  Equation = "DJDBeta"
  procedure = "ElmerIceSolvers" "AdjointStokes_GradientBetaSolver"

  Flow Solution Name = String "Flow Solution"
  Adjoint Solution Name = String "Adjoint"
  Gradient Variable Name = String "DJDbeta"

!! Exported Variables
  Exported Variable 1 = DJDbeta
End

Solver 12
  Equation = "DJDBeta_Reg"

  Variable = -nooutput "DJDBReg"
  Variable DOFs = 1

  procedure = "ElmerIceSolvers" "Adjoint_CostRegSolver"
  Optimize Bandwidth = logical false

  Problem Dimension = Integer 2
  Cost Filename = File "CostReg_$name$.dat"
  Optimized Variable Name = String "alpha"
  Gradient Variable Name = String "DJDBeta"
  Cost Variable Name = String "CostValue"
  Lambda = Real $LambdaReg
  Reset Cost Value = Logical False
  A priori Regularisation = Logical False
end

!!!!! Optimization procedure 
Solver 13
  Exec Solver = after Timestep

  Equation = "Optimize_m1qn3"
  procedure = "ElmerIceSolvers" "Optimize_m1qn3Parallel"

  Cost Variable Name = String "CostValue"
  Optimized Variable Name = String "alpha"
  Gradient Variable Name = String "DJDBeta"
  gradient Norm File = String "GradientNormAdjoint_$name$.dat"

  !Note: it may be beneficial to set this to True, which scales
  !the gradient by 1/boundary_weights. With this set to false,
  !larger elements produce larger gradients.
  Mesh Independent = Logical False

! M1QN3 Parameters
  M1QN3 dxmin = Real 1.0e-10
  M1QN3 epsg = Real  1.e-6
  M1QN3 niter = Integer #IMAX
  M1QN3 nsim = Integer #IMAX
  M1QN3 impres = Integer 5
  M1QN3 DIS Mode = Logical False
  M1QN3 df1 = Real 0.5
  M1QN3 normtype = String "dfn"
  M1QN3 OutputFile = File  "M1QN3_$name$.out"
  M1QN3 ndz = Integer 20
end

Solver 14
  Equation = "Emergence velocity"
  Procedure = "ElmerIceSolvers" "GetEmergenceVelocity"
  Variable = -dofs 1 EmergenceVelocity
End

Solver 15
!  Exec Solver = String "never"
  Exec Solver = String "after saving"
  Equation = String "ResultOutput"
  Procedure = File "ResultOutputSolve" "ResultOutputSolver"
  Save Geometry Ids = Logical True
  Output File Name = File $name
  Output Format = String "vtu"
  Output Directory = File #outdir
  Vtu Format = Logical True
  Save Geometry Ids = Logical True
  Scalar Field 1  = EmergenceVelocity
  Scalar Field 2  = alpha
  Scalar Field 3  = proj_beta
  Scalar Field 4  = bed
  Scalar Field 5  = height
  Scalar Field 6  = depth
  Scalar Field 7  = FS upper
  Scalar Field 8  = FS lower
  Scalar Field 11 = groundedmask
  Scalar Field 12 = glen enhancement factor
  Scalar Field 13 = proj_dvu 1
  Scalar Field 14 = proj_dvu 2
  Scalar Field 15 = DJDBeta
  Scalar Field 16 = vx
  Scalar Field 17 = vy
!  Scalar Field 13 = smbref
!  Scalar Field 6  = Temperature Homologous
  Vector Field 1  = velocity 
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Equation 1
  Active Solvers (8) = 1 2 3 4 6 8 10 15
  Flow Solution Name = String "Flow Solution"
  Convection = Computed 
  NS Convect= False
End

Equation 2
  Active Solvers (5)=  5 7 11 12 13
  Convection = Computed 
  Flow Solution Name = String "Flow Solution"
  Friction Load Mask = String "GroundedMask" !need this?
End

Equation 3
  Active Solvers (2)=  9 14
  Convection = Computed 
  Flow Solution Name = String "Flow Solution"
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Boundary Condition 1
  Name = "inland_boundary"
  Target Boundaries(1)  = 1

  Normal-Tangential Velocity = Logical True
  Slip Coefficient 1 = Real 10.0
  Slip Coefficient 2 = Real 0.001
  Slip Coefficient 3 = Real 0.001
End

Boundary Condition 2
  Name = "calving_front"
  Target Boundaries(1) = 2

 Flow Force BC = logical True
 External Pressure = variable coordinate 3
   Real Procedure "ElmerIceUSF" "SeaPressure"
 
 !Normal-Tangential Velocity = True
 Compute Sea Pressure = Logical True
End

Boundary Condition 3
  Name= "bed" !mandatory to compute regularistaion term of the cost function (int (dbeta/dx) 2)
  Body ID = 2
  
  !Test Contact Tolerance = real 1.0e-10
  !Height = Real 0.0
  Mass Consistent Normals = logical True

  Normal-Tangential Velocity = Logical True  

!  Velocity 1 = Variable bmb, GroundedMask
!    Real lua "bmb_as_vel(tx[0],tx[1])"

  Velocity 1 = Real 0.0e0
  Velocity 1 Condition = Variable GroundedMask
    Real MATC "tx + 0.5"

 ! FS lower = Variable proj_thickness, proj_bed
 !    Real lua "floatLower(tx[0],tx[1])"

!!Brought over from Simple2SR
!  Slip Coefficient 2 = Variable GroundedMask
!     Real LUA "IfThenElse((tx[0] > 0), 1.0e-04, 0.0)" !math.exp(10^tx[1])
!  Slip Coefficient 3 = Variable GroundedMask
!     Real LUA "IfThenElse((tx[0] > 0), 1.0e-04, 0.0)"
!  !Slip Coefficient derivative = Real 0.0

  Slip Coefficient 2 = Variable alpha, GroundedMask
    REAL procedure "ElmerIceUSF" "TenPowerA_masked"
  Slip Coefficient 3 = Variable alpha, GroundedMask
    REAL procedure "ElmerIceUSF" "TenPowerA_masked"
  Slip Coefficient derivative = Variable alpha, GroundedMask
    REAL procedure "ElmerIceUSF" "TenPowerA_d_Masked"

  !Flow Force BC = logical True

 ! External Pressure = Variable Coordinate 3
 !   Real lua "sw_pressure(tx[0])" 
   !Real LUA "IfThenElse((tx[0] > 0), 0.0,-rhoo*gravity*tx[0])"  !CHANGE BACK TO SW_PRESSURE?

  External Pressure = variable coordinate 3
    Real Procedure "ElmerIceUSF" "SeaPressure"
  !Compute Sea Pressure = Logical True

  !Slip Coefficient 1 = Variable Coordinate 3
  !  Real Procedure "ElmerIceUSF" "SeaSpring"
  !Compute Sea Spring = Logical True

End

! Upper Surface
Boundary Condition 4
  Name= "Surface" !mandatory to compute cost function
  Body Id = 3
  !Depth = Real 0.0
  Normal-Tangential Velocity = Logical True ! Commented out in SimpleSR
End 