!---LUA BEGIN
! assert(loadfile('../COLD.lua'))()
! assert(loadfile('../PIG.lua'))()
!---LUA END

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
$name="TG_dV_GEF"

! The total cost function to minimize is J=J_u + LambdaReg * Jreg
! where J_u=velocity error; Jreg=regularisation (smoothness)
$LambdaReg=1.0e5

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Header
  Mesh DB "." "#meshdb#"
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Constants 
  rhoo = Real #rhoo
  rhoi = Real #rhoi
  gravity = Real #gravity
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Simulation
  Coordinate System  = Cartesian 3D 
  Simulation Type = Transient
  Timestepping Method = "bdf" !added April 12
  BDF Order = 1 !Added April 12

  Timestep Intervals = 2
  TimeStep Size = 0.00014 !1 hr CAN ADD TIME EVOLUTION
  Output Intervals = 1

  Extruded Mesh Levels = #MLEV
  Extruded Mesh Density = Variable Coordinate 1
    Real MATC "1.0 + 2.5 * tx"

  Steady State Min Iterations = 1
  Steady State Max Iterations = 1

  Output File = "$name$.result" 
  !Post File = "$name$_.vtu"

  Restart File = "../TG_S1p5/results/readnc_tempc_transient.result"
  Restart Position = 0
  Restart Before Initial Conditions = logical True
  Initialize Dirichlet Conditions = Logical False

  max output level = 9
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Main ice body
Body 1
  Equation = 1
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

Body 2
  Equation = 2
  Material = 2
End

Body 3
  Equation = 3
  Material = 3
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Initial Condition 1
  Temperature = Variable temp_c
    Real lua "K2C(tx[0])"

  FS lower = Variable proj_thickness, proj_bed
    Real lua "floatLower(tx[0],tx[1])"
  FS upper = Variable proj_thickness, proj_bed
    Real lua "floatUpper(tx[0],tx[1])"

  dvu_ext = Variable proj_dvu 1, proj_dvu 2
    Real lua "math.sqrt(tx[0]*tx[0] + tx[1]*tx[1] )"   
End
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Body Force 1
  Flow BodyForce 1 = Real 0.0                          
  Flow BodyForce 2 = Real 0.0                          
  Flow BodyForce 3 = Real #gravity
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! ice material properties in MPa - m - a system 
Material 1
  Density = Real #rhoi
  Cauchy = Logical TRUE !change to false for deviatoric

  Viscosity Model = String "glen"
  Viscosity = 1.0 ! Dummy but avoid warning output

  Glen Exponent = Real 3.0
  !Glen Enhancement Factor = Real 1.0
  Glen Enhancement Factor = Variable dvu_ext
    Real lua "IfThenElse((tx[0] < 0.3), 1.0,10.0)"
 
  Limit Temperature = Real #Tlim
  Relative Temperature = Variable Temperature, Pressure 
    Real lua "relativetemp(tx[0], tx[1])"
  
  Rate Factor 1 = Real #A1 
  Rate Factor 2 = Real #A2 
  Activation Energy 1 = Real #Q1
  Activation Energy 2 = Real #Q2
  
  Critical Shear Rate = Real 1.0e-10
  sea level = Real 0.0
End

Material 2
  Density = Real #rhoi
  Min FS lower = Equals proj_bed
  Min Zs Bottom = Equals proj_bed
End

Material 3
  Density = Real #rhoi
  Min FS upper = variable "proj_bed"
    Real lua "tx[0] + MINH"
End


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Solver 1
  Equation = "DummyRoutine"
  Procedure = File "DummySolver" "DummySolver"
  Exec Solver = "never" !"Before all"
  Variable = -nooutput dummyV
  Variable Output = False
  Exported Variable 1 = -dofs 1 "proj_bed
  Exported Variable 2 = -dofs 1 "proj_beta"
  Exported Variable 3 = -dofs 2 "proj_dvu"
  Exported Variable 4 = -dofs 1 "proj_thickness"
  Exported Variable 5 = -dofs 1 "proj_vobs"
  Exported Variable 6 = -dofs 1 "proj_vx"
  Exported Variable 7 = -dofs 1 "proj_vy"
  Exported Variable 8 = -dofs 1 "temp_c"
  Exported Variable 9 = -dofs 1 "thickness
End

Solver 2
  Exec Solver = Before all
  Equation = "MapCoordinate_init"
  Procedure = "StructuredMeshMapper" "StructuredMeshMapper"
  Active Coordinate = Integer 3

  Top Surface Variable Name = String "FS upper"
  Bottom Surface Variable Name = String "FS lower"

  Dot Product Tolerance = Real #DPtol
  !Displacement Mode = Logical False !NEEDED?
  Correct Surface = Logical True
  Minimum Height = Real #MINH
End

Solver 3
  !Exec Solver = "never"
  Exec Solver = "Before Timestep"
  Equation = "MapCoordinate"
  Procedure = "StructuredMeshMapper" "StructuredMeshMapper"

  Active Coordinate = Integer 3
  Dot Product Tolerance = Real #DPtol
  Minimum Height = Real #MINH
  Top Surface Variable Name = String FS upper
  Bottom Surface Variable Name = String FS lower
  Correct Surface = Logical True
End

Solver 4
  Equation = "HeightDepth"
  Exec Solver = "Before Timestep"
  Procedure = "StructuredProjectToPlane" "StructuredProjectToPlane"
  Active Coordinate = Integer 3
  Operator 1 = depth
  Operator 2 = height
End

Solver 5
  Exec Solver = Before all !Was before simulation
  Equation = "GroundedMask"
  Procedure = "ElmerIceSolvers" "GroundedSolver"
  Variable = GroundedMask
  Variable DOFs = 1
  Toler = Real #GLTolerance
  Bedrock Variable = String "proj_bed" !NOT IN TG_relax_S2.sif but probably needed
End

Solver 6
!  Exec solver = never
  Equation = "Normal Vector"
  Procedure = "ElmerIceSolvers" "ComputeNormalSolver"
  Variable = "Normal Vector"
  Variable DOFs = 3
  ComputeAll = Logical True
  Optimize Bandwidth = Logical False
End

Solver 7
!  Exec solver = never
  Equation = Fw
  Procedure = "ElmerIceSolvers" "GetHydrostaticLoads"
  Variable = Fw[Fwater:3]
  Variable DOFs = 3
End

!!!! Navier-Stokes Solution
Solver 8
  Equation = "Navier-Stokes"  
  Stabilization Method = String Stabilized
  Flow Model = Stokes

  Optimize Bandwidth = True

  !mandatory to save bulk stiffness matrix
  Calculate Loads = Logical True

  Linear System Solver = Direct
  Linear System Direct Method =  mumps
  Mumps percentage increase working space = Integer 60

  Nonlinear System Max Iterations = Integer 40 !WAS 5 
  Nonlinear System Convergence Tolerance  = Real 1.0e-1
  Nonlinear System Newton After Iterations = 500 !WAS 50
  Nonlinear System Newton After Tolerance = 1.0e-5 ! is e-10 in  LAGS_relax_S2.sif
  Nonlinear System Reset Newton = Logical True !NEEDED?
  Nonlinear System Relaxation Factor = 0.5 !NEEDED?
  Nonlinear System Abort Not Converged = Logical True !WAS SET TO FALSE FOR TESTING, I BELIEVE

  Steady State Convergence Tolerance = Real 1.0e-10

  ! Timings of the solver
  Linear System Timing = Logical True
  Linear System Timing Cumulative = Logical True
  Solver Timing = Logical True
  Solver Timing Cumulative = Logical True

  ! Convergence on timelevel (IS THIS REQUIRED HERE?)
  !---------------------------------------------
  Steady State Convergence Tolerance = Real 1.0e-8  

  !Exported Variable 1 = -dofs 1 "FS Upper"
  !Exported Variable 2 = -dofs 1 "FS Lower"
  Exported Variable 1 = -dofs 1 "Temperature"
  Exported Variable 2 = -dofs 1 "dvu_ext"
  Exported Variable 3 = -dofs 1 "glen enhancement factor"
End

Solver 9
  !Exec solver = "Never" !runs as never commented in by LAGS_relax_S2.sif
  Equation = String "StressSolver"
  Procedure =  File "ElmerIceSolvers" "ComputeDevStress"
  Variable = -nooutput "Sij"
  Variable DOFs = 1
  Flow Solver Name = String "Flow Solution"
  Stress Variable Name = String "Stress"
  Exported Variable 1 = "Stress" ! [Sxx, Syy, Szz, Sxy] in 2D
                                 ! [Sxx, Syy, Szz, Sxy, Syz, Szx] in 3D
  Exported Variable 1 DOFs = 6   ! 4 in 2D, 6 in 3D

  Linear System Solver = "Iterative"
!  Linear System Solver = "Direct"
!  Linear System Direct Method = MUMPS

  Linear System Iterative Method = "BiCGStab"
!  Linear System Iterative Method = "BiCGStabl"
  Bicgstabl Polynomial Degree = 4
  Linear System Max Iterations = 300
  Linear System Convergence Tolerance = 1.0E-07
  Linear System Abort Not Converged = True
  Linear System Preconditioning = "ILU1"
  Linear System Residual Output = 1
End

Solver 10
! Exec Solver = Never
  Exec Solver = "After TimeStep"
  Equation =  String "Lower Free Surface"
  Variable = "FS lower"
  Variable DOFs = 1
  Procedure = "FreeSurfaceSolver" "FreeSurfaceSolver"
  Apply Dirichlet = Logical True
  Linear System Solver = Iterative
  Linear System Iterative Method = BiCGStab
  Linear System Max Iterations  = 500
  Linear System Preconditioning = ILU1
  Linear System Convergence Tolerance = 1.0e-08
  Nonlinear System Max Iterations = 100
  Nonlinear System Min Iterations = 2
  Nonlinear System Convergence Tolerance = 1.0e-06 !Is e-06 in LAGS_relax_S2.sif, 1.0e-04 originally
!Steady State Convergence Tolerance = 1.0e-04 !CHECK IF THIS IS NEEDED!
!  Stabilization Method = Bubbles
  Stabilization Method = Stabilized
  Flow Solution Name = String "Flow Solution"
  Use Accumulation = Logical True
!  Normal Flux = Logical False
  Exported Variable 1 = FS lower Residual
  Exported Variable 1 DOFS = 1
  Exported Variable 2 = ReferenceFS lower
  Exported Variable 2 DOFS = 1
End

Solver 11
!  Exec Solver = Never
  Exec Solver = "After TimeStep"
  Equation =  String "Upper Free Surface"
  Variable = "FS upper"
  Variable DOFs = 1
  Procedure = "FreeSurfaceSolver" "FreeSurfaceSolver"
  Apply Dirichlet = Logical True
  Linear System Solver = Iterative
  Linear System Iterative Method = BiCGStab
  Linear System Max Iterations  = 500
  Linear System Preconditioning = ILU1
  Linear System Convergence Tolerance = 1.0e-08
  Nonlinear System Max Iterations = 100
  Nonlinear System Min Iterations = 2
  Nonlinear System Convergence Tolerance = 1.0e-06
  Steady State Convergence Tolerance = 1.0e-4
!  Stabilization Method = Bubbles
  Stabilization Method = Stabilized
  Flow Solution Name = String "Flow Solution"
  Use Accumulation = Logical True
  Normal Flux = Logical False
  Exported Variable 1 =  FS upper Residual
  Exported Variable 1 DOFS = 1
  Exported Variable 2 = ReferenceFS upper
  Exported Variable 2 DOFS = 1
End

Solver 12
   Exec Solver = after timestep
   Procedure = File "SaveData" "SaveMaterials"
   Parameter 1 = String glen enhancement factor
End

Solver 13
  Equation = String "ResultOutput"
  Procedure = File "ResultOutputSolve" "ResultOutputSolver"
  Save Geometry Ids = Logical True
  Output File Name = File $name
  Output Format = String "vtu"
  Output Directory = File "./vtuoutputs"
  Vtu Format = Logical True
  
  Scalar Field 1  = bed
  Scalar Field 2  = depth
  Scalar Field 3  = fs upper
  Scalar Field 4  = fs lower
  Scalar Field 5  = groundedmask
  Scalar Field 6 = height
  Scalar Field 7 = proj_beta
  Scalar Field 8 = proj_vobs
  Scalar Field 9 = proj_vx
  Scalar Field 10 = proj_vy
  Scalar Field 11 = surface
  Scalar Field 12 = proj_thickness
  Scalar Field 13 = glen enhancement factor   
  Vector Field 1 = proj_dvu !if need, may need to write out as proj_dvu 1 and proj_dvu 2
  Vector Field 2 = velocity 
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Equation 1
  Active Solvers (9) = 1 2 3 4 6 8 9 12 13
End

Equation 2
  Active Solvers (3) = 5 7 10 
  Convection = Computed
  Flow Solution Name = String "Flow Solution"
End

Equation 3
  Active Solvers (1) = 11 
  Convection = Computed
  Flow Solution Name = String "Flow Solution"
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Boundary Condition 1
  Name = "inland_boundary" 
  Target Boundaries(1) = 1

  Normal-Tangential Velocity = Logical True
  Slip Coefficient 1 = Real 10.0
  !External Pressure = Variable depth !WHY DO WE NEED THIS
   ! Real LUA "rhoi*gravity*tx[0]"   
  Slip Coefficient 2 = Real 0.001
  Slip Coefficient 3 = Real 0.001
End

Boundary Condition 2
  Name = "calving_front"
  Target Boundaries(1) = 2
  
  Flow Force BC = logical True !Using this instead of Thomas's trick below because of lua errors, but most likely ok 
  External Pressure = variable coordinate 3
    Real Procedure "ElmerIceUSF" "SeaPressure"

  Normal-Tangential Velocity = True
  
  Compute Sea Pressure = Logical True
  !External Pressure = Variable Coordinate 3 !Thomas's trick
   ! Real LUA "IfThenElse((tx[0] > 0), 0.0,-rhoo*gravity*tx[0])" 
End

Boundary Condition 3
  Name= "bed"! mandatory to compute regularistaion term of the cost function (int (dbeta/dx) 2)
  Body Id = 2

  Test Contact Tolerance = real 1.0e-10
  Height = Real 0.0
  Mass Consistent Normals = logical True !WHAT'S THIS?

  Normal-Tangential Velocity = Logical True  

  Velocity 1 = Real 0.0e0
  Velocity 1 Condition = Variable GroundedMask
    Real LUA "tx[0] + 0.5"
  
  FS lower = Variable proj_thickness, proj_bed
     Real lua "floatLower(tx[0],tx[1])"

  Slip Coefficient 2 = Variable GroundedMask
     Real LUA "IfThenElse((tx[0] > 0), 1.0e-04, 0.0)" 
  Slip Coefficient 3 = Variable GroundedMask
     Real LUA "IfThenElse((tx[0] > 0), 1.0e-04, 0.0)" 
  !Slip Coefficient derivative = Real 0.0
  
  Flow Force BC = Logical True

  External Pressure = Variable Coordinate 3
     Real LUA "IfThenElse((tx[0] > 0), 0.0,-rhoo*gravity*tx[0])"  !CHANGE BACK TO SW_PRESSURE?

  Slip Coefficient 1 = Variable Coordinate 3
     Real Procedure "ElmerIceUSF" "SeaSpring"
  Compute Sea Spring = Logical True

!!!BRING BACK IN WHEN READY FOR INVERSION.
!!!Removes application of alpha in regions of ungrounded ice
!  Slip Coefficient 2 = Variable alpha 
 !   REAL procedure "ElmerIceUSF" "TenPowerA"
 ! Slip Coefficient 3 = Variable alpha
 !   REAL procedure "ElmerIceUSF" "TenPowerA"
 ! Slip Coefficient derivative = Variable alpha
 !   REAL procedure "ElmerIceUSF" "TenPowerA_d"
  
!  Slip Coefficient 2 = Variable alpha, GroundedMask 
!    REAL procedure "ElmerIceUSF" "TenPowerA_masked" !has been USF_CoV
!  Slip Coefficient 3 = Variable alpha, GroundedMask
!    REAL procedure "ElmerIceUSF" "TenPowerA_masked" !has been USF_CoV
!  Slip Coefficient derivative = Variable alpha, GroundedMask
!    REAL procedure "ElmerIceUSF" "TenPowerA_d_Masked" !has been USF_CoV

End

! Upper Surface
Boundary Condition 4
  Name= "Surface" mandatory to compute cost function
  Body Id = 3
  Depth = Real 0.0
  FS upper = Variable proj_thickness,proj_bed
     Real lua "floatUpper(tx[0],tx[1])"
  !Normal-Tangential Velocity = Logical True !IS THIS AND BELOW NEEDED FOR INVERSION?I DON'T THINK SO
End 
