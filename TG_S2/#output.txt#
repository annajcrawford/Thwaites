ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ELMER SOLVER (v 9.0) STARTED AT: 2021/05/28 22:32:52
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
ParCommInit:  Initialize #PEs:          128
MAIN: 
MAIN: =============================================================
MAIN: ElmerSolver finite element software, Welcome!
MAIN: This program is free software licensed under (L)GPL
MAIN: Copyright 1st April 1995 - , CSC - IT Center for Science Ltd.
MAIN: Webpage http://www.csc.fi/elmer, Email elmeradm@csc.fi
MAIN: Version: 9.0 (Rev: f888395, Compiled: 2021-05-27)
MAIN:  Running in parallel using 128 tasks.
MAIN:  Running with just one thread per task.
MAIN:  HYPRE library linked in.
MAIN:  MUMPS library linked in.
MAIN:  Lua interpreter linked in.
MAIN:  Zoltan library linked in.
MAIN: =============================================================
LoadInputFile: Trying to read "Run Control" section only
MAIN: 
MAIN: 
MAIN: -------------------------------------
MAIN: Reading Model: TG_SR.sif
LoadInputFile: Scanning input file: TG_SR.sif
LoadInputFile: Scanning only size info
LoadInputFile: First time visiting
LoadInputFile: Reading base load of sif file
LoadInputFile: Loading input file: TG_SR.sif
LoadInputFile: Reading base load of sif file
CheckKeyword:  Unlisted keyword: [buoyancy use basal melt] in section: [constants]
CheckKeyword:  Unlisted keyword: [bottom surface name] in section: [constants]
CheckKeyword:  Unlisted keyword: [sea level] in section: [constants]
CheckKeyword:  Unlisted keyword: [water density] in section: [constants]
CheckKeyword:  Unlisted keyword: [gamma 0] in section: [constants]
CheckKeyword:  Unlisted keyword: [ice density] in section: [constants]
CheckKeyword:  Unlisted keyword: [sw density] in section: [constants]
CheckKeyword:  Unlisted keyword: [latent heat] in section: [constants]
CheckKeyword:  Unlisted keyword: [sw cp] in section: [constants]
CheckKeyword:  Unlisted keyword: [rhoo] in section: [constants]
CheckKeyword:  Unlisted keyword: [rhoi] in section: [constants]
CheckKeyword:  Unlisted keyword: [fs lower] in section: [initial condition 1]
CheckKeyword:  Unlisted keyword: [fs upper] in section: [initial condition 1]
CheckKeyword:  Unlisted keyword: [cauchy] in section: [material 1]
CheckKeyword:  Unlisted keyword: [limit temperature] in section: [material 1]
CheckKeyword:  Unlisted keyword: [sea level] in section: [material 1]
CheckKeyword:  Unlisted keyword: [min fs upper] in section: [material 3]
CheckKeyword:  Unlisted keyword: [minimum height] in section: [solver 1]
CheckKeyword:  Unlisted keyword: [top surface variable name] in section: [solver 1]
CheckKeyword:  Unlisted keyword: [bottom surface variable name] in section: [solver 1]
CheckKeyword:  Unlisted keyword: [correct surface] in section: [solver 1]
CheckKeyword:  Unlisted keyword: [minimum height] in section: [solver 2]
CheckKeyword:  Unlisted keyword: [top surface variable name] in section: [solver 2]
CheckKeyword:  Unlisted keyword: [bottom surface variable name] in section: [solver 2]
CheckKeyword:  Unlisted keyword: [correct surface] in section: [solver 2]
CheckKeyword:  Unlisted keyword: [toler] in section: [solver 4]
CheckKeyword:  Unlisted keyword: [bedrock variable] in section: [solver 4]
CheckKeyword:  Unlisted keyword: [computeall] in section: [solver 5]
CheckKeyword:  Unlisted keyword: [nonlinear system abort not converged] in section: [solver 7]
CheckKeyword:  Unlisted keyword: [flow solver name] in section: [solver 8]
CheckKeyword:  Unlisted keyword: [stress variable name] in section: [solver 8]
CheckKeyword:  Unlisted keyword: [test contact tolerance] in section: [boundary condition 3]
CheckKeyword:  Unlisted keyword: [height] in section: [boundary condition 3]
CheckKeyword:  Unlisted keyword: [fs lower condition] in section: [boundary condition 3]
Loading user function library: [ElmerIceUSF]...[TenPowerA_masked]
Loading user function library: [ElmerIceUSF]...[TenPowerA_masked]
CheckKeyword:  Unlisted keyword: [depth] in section: [boundary condition 4]
LoadInputFile: Number of BCs: 4
LoadInputFile: Number of Body Forces: 1
LoadInputFile: Number of Initial Conditions: 1
LoadInputFile: Number of Materials: 3
LoadInputFile: Number of Equations: 3
LoadInputFile: Number of Solvers: 11
LoadInputFile: Number of Bodies: 3
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_Init0]
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_Init0]
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_Init0]
Loading user function library: [ElmerIceSolvers]...[GroundedSolver_Init0]
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_Init0]
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_Init0]
Loading user function library: [ElmerIceSolvers]...[ComputeDevStress_Init0]
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_Init0]
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_Init0]
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_Init0]
LoadMesh: Starting
ElmerAsciiMesh: Performing step: 1
ElmerAsciiMesh: Base mesh name: ./../mesh2D_TG_refpart/
InitializeMesh: Number of nodes in mesh: 504
InitializeMesh: Number of bulk elements in mesh: 893
InitializeMesh: Number of boundary elements in mesh: 62
ElmerAsciiMesh: Performing step: 2
SetMeshDimension: Dimension of mesh is: 2
SetMeshDimension: Max dimension of mesh is: 2
ElmerAsciiMesh: Performing step: 3
ElmerAsciiMesh: Performing step: 4
PermuteNodeNumbering: Performing node mapping
MapBodiesAndBCs: Remapping boundaries
MapBodiesAndBCs: Minimum initial boundary index: 1
MapBodiesAndBCs: Maximum initial boundary index: 2
ElmerAsciiMesh: Performing step: 5
ElmerAsciiMesh: Performing step: 6
LoadMesh: Loading mesh done
LoadMesh: Elapsed REAL time:     1.2564 (s)
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0004 (s)
UnitSegmentDivision: Creating functional division
UnitSegmentDivision: Convergence obtained in 135 iterations
UnitSegmentDivision: Mesh division ready
UnitSegmentDivision: w(0) :   0.0000E+00
UnitSegmentDivision: w(1) :   3.7444E-02
UnitSegmentDivision: w(2) :   7.8392E-02
UnitSegmentDivision: w(3) :   1.2317E-01
UnitSegmentDivision: w(4) :   1.7215E-01
UnitSegmentDivision: w(5) :   2.2571E-01
UnitSegmentDivision: w(6) :   2.8428E-01
UnitSegmentDivision: w(7) :   3.4833E-01
UnitSegmentDivision: w(8) :   4.1838E-01
UnitSegmentDivision: w(9) :   4.9499E-01
UnitSegmentDivision: w(10) :   5.7877E-01
UnitSegmentDivision: w(11) :   6.7039E-01
UnitSegmentDivision: w(12) :   7.7059E-01
UnitSegmentDivision: w(13) :   8.8017E-01
UnitSegmentDivision: w(14) :   1.0000E+00
MeshExtrude: First Extruded BC set to: 3
MeshExtrude: Number of new BCs for layers: 1
SetMeshDimension: Dimension of mesh is: 3
SetMeshDimension: Max dimension of mesh is: 3
NonNodalElements: Requested elements require creation of edges
FindMeshEdges: Determining faces in 3D mesh
FindMeshEdges: Determining edges in 3D mesh
ParallelNonNodalElements: Number of initial nodes: 7560
ParallelNonNodalElements: Number of initial faces: 32939
ParallelNonNodalElements: Number of initial edges: 27996
ParallelNonNodalElements: Number of shared nodes: 780
ParallelNonNodalElements: Number of owned shared nodes: 360
ParallelNonNodalElements: Number of shared faces: 714
ParallelNonNodalElements: Number of owned shared faces: 28
ParallelNonNodalElements: Number of shared edges: 1493
ParallelNonNodalElements: Number of owned shared edges: 366
MAIN: -------------------------------------
AddEquationBasics: Setting up solver: mapcoordinate_init
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_Init]
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_bulk]
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper]
AddEquationBasics: Setting up solver: mapcoordinate
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_Init]
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_bulk]
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper]
AddEquationBasics: Setting up solver: heightdepth
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_Init]
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_bulk]
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane]
AddEquationBasics: Setting up solver: groundedmask
Loading user function library: [ElmerIceSolvers]...[GroundedSolver_Init]
Loading user function library: [ElmerIceSolvers]...[GroundedSolver_bulk]
Loading user function library: [ElmerIceSolvers]...[GroundedSolver]
AddEquationBasics: Creating standard variable: groundedmask
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: groundedmask...done.
OptimizeBandwidth: Half bandwidth without optimization: 463
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 37
OptimizeBandwidth: ---------------------------------------------------------
AddEquationBasics: Setting up solver: normal vector
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_Init]
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_bulk]
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver]
AddEquationBasics: Creating standard variable: normal vector
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: normal vector...done.
OptimizeBandwidth: Half bandwidth without optimization: 992
OptimizeBandwidth: ---------------------------------------------------------
AddEquationBasics: Setting up solver: fw
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_Init]
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_bulk]
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads]
AddEquationBasics: Creating standard variable: fw[fwater:3]
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: fw...done.
OptimizeBandwidth: Half bandwidth without optimization: 463
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 37
OptimizeBandwidth: ---------------------------------------------------------
AddEquationBasics: Setting up solver: navier-stokes
Loading user function library: [FlowSolve]...[FlowSolver_Init]
Loading user function library: [FlowSolve]...[FlowSolver_bulk]
Loading user function library: [FlowSolve]...[FlowSolver]
AddEquationBasics: Creating standard variable: flow solution[velocity:3 pressure:1]
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: navier-stokes...done.
OptimizeBandwidth: Half bandwidth without optimization: 992
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 890
OptimizeBandwidth: ---------------------------------------------------------
AddEquationBasics: Setting up solver: stresssolver
Loading user function library: [ElmerIceSolvers]...[ComputeDevStress_Init]
Loading user function library: [ElmerIceSolvers]...[ComputeDevStress_bulk]
Loading user function library: [ElmerIceSolvers]...[ComputeDevStress]
AddEquationBasics: Creating standard variable: sij
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: stresssolver...done.
OptimizeBandwidth: Half bandwidth without optimization: 992
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 890
OptimizeBandwidth: ---------------------------------------------------------
AddEquationBasics: Setting up solver: lower free surface
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_Init]
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_bulk]
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver]
AddEquationBasics: Creating standard variable: fs lower
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: lower free surface...done.
OptimizeBandwidth: Half bandwidth without optimization: 463
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 37
OptimizeBandwidth: ---------------------------------------------------------
AddEquationBasics: Setting up solver: upper free surface
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_Init]
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_bulk]
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver]
AddEquationBasics: Creating standard variable: fs upper
OptimizeBandwidth: ---------------------------------------------------------
OptimizeBandwidth: Computing matrix structure for: upper free surface...done.
OptimizeBandwidth: Half bandwidth without optimization: 463
OptimizeBandwidth: 
OptimizeBandwidth: Bandwidth Optimization ...done.
OptimizeBandwidth: Half bandwidth after optimization: 37
OptimizeBandwidth: ---------------------------------------------------------
AddEquationBasics: Setting up solver: resultoutput
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_Init]
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_bulk]
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver]
Restart: Perfoming global Restart for:
LoadRestartFile: 
LoadRestartFile: --------------------------------------------
LoadRestartFile: Restart for mesh name:
LoadRestartFile: Restart for number of nodes: 7560
LoadRestartFile: Reading data from file: ../TG_S1p5/results/readnc_tempc_transient.result.0
LoadRestartFile: ASCII 3
LoadRestartFile: Reading ascii restart file version 3
LoadRestartFile: Total number of dofs in restart file: 23
LoadRestartFile: Creating variable: dvu
LoadRestartFile: Creating variable: proj_dvu
LoadRestartFile: Creating variable: vobs
LoadRestartFile: Creating variable: vx
LoadRestartFile: Creating variable: vy
LoadRestartFile: Creating variable: surface
LoadRestartFile: Creating variable: bed
LoadRestartFile: Creating variable: thickness
LoadRestartFile: Creating variable: beta
LoadRestartFile: Creating variable: smbref
LoadRestartFile: Creating variable: q_geo
LoadRestartFile: Creating variable: as_perp_apl
LoadRestartFile: Creating variable: temp_c
LoadRestartFile: Creating variable: proj_vobs
LoadRestartFile: Creating variable: proj_vx
LoadRestartFile: Creating variable: proj_vy
LoadRestartFile: Creating variable: proj_beta
LoadRestartFile: Creating variable: proj_smbref
LoadRestartFile: Creating variable: proj_bed
LoadRestartFile: Creating variable: proj_surf
LoadRestartFile: Creating variable: proj_thickness
LoadRestartFile: Reading time sequence:    2.000E-01
LoadRestartFile: Reading variables on timestep: 1
LoadRestartFile: Time spent for restart (s):      1.3790E-01
LoadRestartFile: All done
LoadRestartFile: --------------------------------------------
ElmerSolver: Number of timesteps to be saved: 76
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate_init
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
DetectExtrudedStructure: Determining extruded structure
DetectExtrudedStructure: Unit vector of direction:   0.000   0.000   1.000
DetectExtrudedStructure: determine top and bottom pointers
DetectExtrudedStructure: Layered structure detected in 14 cycles
DetectExtrudedStructure:  Top and bottom pointer init time:    2.9390000000000249E-003
DetectExtrudedStructure: Top and bottom pointer init rounds: 14
DetectExtrudedStructure: Number of nodes at the top: 504
DetectExtrudedStructure: Number of nodes at the bottom: 504
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper:  Active coordinate mapping time:    1.2029999999998431E-003
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0080 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
List_ToListMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 3116
List_ToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: groundedmask
GroundedSolver: Computing grounded mask from geometry
GroundedSolver: Memory allocation done.
GroundedSolver: Bedrock Variable name found
GroundedSolver: No front variable defined. Some basal frontal nodes may be left with GroundedMask=1
 Grounding Line, (x,y)  -1522016.1185099999       -511877.81132899999     
 Grounding Line, (x,y)  -1522357.8267000001       -511510.72793400002     
 Grounding Line, (x,y)  -1521639.4272000000       -512228.41385800001     
 Grounding Line, (x,y)  -1521134.4354999999       -512118.88402300002     
 Grounding Line, (x,y)  -1519763.4398500000       -511165.19773600000     
 Grounding Line, (x,y)  -1525538.1665300000       -512680.43026800000     
 Grounding Line, (x,y)  -1524750.7739899999       -509579.51694599999     
 Grounding Line, (x,y)  -1524263.2409099999       -509713.22479200002     
 Grounding Line, (x,y)  -1518155.8106900000       -509823.58660799998     
 Grounding Line, (x,y)  -1519326.9034000000       -510887.31712999998     
 Grounding Line, (x,y)  -1524816.6792100000       -510702.32751799998     
 Grounding Line, (x,y)  -1524338.3878200001       -510950.71120999998     
 Grounding Line, (x,y)  -1523769.0410900000       -509983.30447899998     
 Grounding Line, (x,y)  -1525130.0013500000       -509864.77412500000     
 Grounding Line, (x,y)  -1518125.2132999999       -508848.92337700003     
 Grounding Line, (x,y)  -1524857.7068000000       -512075.08035200002     
 Grounding Line, (x,y)  -1524277.3707300001       -511496.62580300000     
 Grounding Line, (x,y)  -1520121.3675899999       -511619.75181400002     
 Grounding Line, (x,y)  -1526224.0955900000       -512670.53855900001     
 Grounding Line, (x,y)  -1522783.6253400000       -511013.88810099999     
 Grounding Line, (x,y)  -1518463.4949500000       -510843.71823800000     
 Grounding Line, (x,y)  -1518844.9176000000       -511096.23263200000     
 Grounding Line, (x,y)  -1517888.9760400001       -508456.07353900000     
 Grounding Line, (x,y)  -1518275.4858500001       -509291.05885700003     
 Grounding Line, (x,y)  -1526845.9750699999       -513056.07657999999     
 Grounding Line, (x,y)  -1524402.2868900001       -511952.35219700000     
 Grounding Line, (x,y)  -1523346.8880300000       -510866.74990200001     
 Grounding Line, (x,y)  -1524986.7863400001       -512570.78676599998     
 Grounding Line, (x,y)  -1520692.8614000001       -512398.75899800000     
 Grounding Line, (x,y)  -1523457.1215299999       -510432.99472399999     
 Grounding Line, (x,y)  -1524695.2385600000       -510136.12019300001     
 Grounding Line, (x,y)  -1520262.8958099999       -512127.05657100002     
 Grounding Line, (x,y)  -1518362.3624000000       -510320.05636300001     
 Grounding Line, (x,y)  -1517819.8931100001       -506846.28257400001     
 Grounding Line, (x,y)  -1517398.4374800001       -507286.47409400000     
 Grounding Line, (x,y)  -1516128.0051100000       -504437.41149099998     
 Grounding Line, (x,y)  -1515715.9513099999       -503001.43801400001     
 Grounding Line, (x,y)  -1516275.7266299999       -502876.88638899999     
 Grounding Line, (x,y)  -1516949.7568900001       -502231.52636100003     
 Grounding Line, (x,y)  -1516048.9085500001       -506213.71153099998     
 Grounding Line, (x,y)  -1516004.6799200000       -505793.81315200002     
 Grounding Line, (x,y)  -1515468.6723700000       -503483.14490100002     
 Grounding Line, (x,y)  -1517518.9619499999       -500847.19315000001     
 Grounding Line, (x,y)  -1515780.2851100001       -503923.82824200002     
 Grounding Line, (x,y)  -1516982.9443900001       -506306.63995300001     
 Grounding Line, (x,y)  -1517474.7344800001       -500313.95736599999     
 Grounding Line, (x,y)  -1517250.2730300000       -506773.89060200000     
 Grounding Line, (x,y)  -1516194.0958499999       -505372.33810800000     
 Grounding Line, (x,y)  -1515872.7469700000       -504891.06331499998     
 Grounding Line, (x,y)  -1573647.7426600000       -401488.73044199997     
 Grounding Line, (x,y)  -1569563.0015900000       -407925.72497500002     
 Grounding Line, (x,y)  -1574193.0063900000       -397793.83594899997     
 Grounding Line, (x,y)  -1569130.2422700000       -406604.10853000003     
 Grounding Line, (x,y)  -1570953.2806599999       -403522.73166599998     
 Grounding Line, (x,y)  -1570755.8925699999       -404048.26536600001     
 Grounding Line, (x,y)  -1569215.4613800000       -407054.01414400002     
 Grounding Line, (x,y)  -1573799.8159500000       -400458.44857900002     
 Grounding Line, (x,y)  -1570423.4603700000       -403762.60758100002     
 Grounding Line, (x,y)  -1574924.4120700001       -398734.76492099999     
 Grounding Line, (x,y)  -1569394.9874499999       -409057.17679400003     
 Grounding Line, (x,y)  -1569667.3928499999       -408584.33713100001     
 Grounding Line, (x,y)  -1566894.0996999999       -410048.73243199999     
 Grounding Line, (x,y)  -1566377.8282600001       -409880.85133099998     
 Grounding Line, (x,y)  -1574370.6661900000       -398237.56569800002     
 Grounding Line, (x,y)  -1571186.3780600000       -403023.06678800000     
 Grounding Line, (x,y)  -1571777.3404800000       -402816.92156799999     
 Grounding Line, (x,y)  -1569845.5421700000       -404036.31803099997     
 Grounding Line, (x,y)  -1569693.6643000001       -404594.33342500002     
 Grounding Line, (x,y)  -1569069.4550900001       -407554.94308000000     
 Grounding Line, (x,y)  -1573296.0319600001       -401172.41593800002     
 Grounding Line, (x,y)  -1516516.3119699999       -506384.08742900001     
 Grounding Line, (x,y)  -1517888.9760400001       -508456.07353900000     
 Grounding Line, (x,y)  -1517676.8656299999       -508107.66780100000     
 Grounding Line, (x,y)  -1517540.0446100000       -507757.93779200001     
 Grounding Line, (x,y)  -1517126.6142000000       -501267.06917600002     
 Grounding Line, (x,y)  -1516372.6137900001       -502263.80083800002     
 Grounding Line, (x,y)  -1516771.4334600000       -501750.37352800003     
 Grounding Line, (x,y)  -1518738.8154200001       -496541.05222200003     
 Grounding Line, (x,y)  -1519086.0361400000       -496102.09544599999     
 Grounding Line, (x,y)  -1519477.2006000001       -495637.59507899999     
 Grounding Line, (x,y)  -1520800.3591700001       -495171.06689600000     
 Grounding Line, (x,y)  -1521875.4377200000       -493969.64252200001     
 Grounding Line, (x,y)  -1522867.8815599999       -493299.02469499997     
 Grounding Line, (x,y)  -1520024.6591399999       -495663.36455200001     
 Grounding Line, (x,y)  -1521170.9651800001       -494750.25107400003     
 Grounding Line, (x,y)  -1524323.6098600000       -492447.53959000000     
 Grounding Line, (x,y)  -1523973.0490000001       -492870.65780699998     
 Grounding Line, (x,y)  -1524667.8570300001       -492746.53031399997     
 Grounding Line, (x,y)  -1524969.9912900000       -492316.41625800001     
 Grounding Line, (x,y)  -1521379.5041700001       -494315.06465999997     
 Grounding Line, (x,y)  -1520256.9008599999       -495150.14687599998     
 Grounding Line, (x,y)  -1523457.8090800000       -493030.44118999998     
 Grounding Line, (x,y)  -1522263.8829000001       -493427.56192900002     
 Grounding Line, (x,y)  -1517435.5465100000       -498742.14803300000     
 Grounding Line, (x,y)  -1517480.7196700000       -498250.71216599998     
 Grounding Line, (x,y)  -1517909.9348400000       -498069.41405600001     
 Grounding Line, (x,y)  -1518209.0382500000       -497317.93161799997     
 Grounding Line, (x,y)  -1518490.8773399999       -496969.05074899999     
 Grounding Line, (x,y)  -1517474.7344800001       -500313.95736599999     
 Grounding Line, (x,y)  -1517490.7986399999       -499808.25184099999     
 Grounding Line, (x,y)  -1517853.1537500001       -499041.07740000001     
 Grounding Line, (x,y)  -1518084.2070599999       -497698.38335800002     
 Grounding Line, (x,y)  -1518738.8154200001       -496541.05222200003     
 Grounding Line, (x,y)  -1517415.6335900000       -499281.31975400000     
 Grounding Line, (x,y)  -1527004.9327900000       -480670.97925700003     
 Grounding Line, (x,y)  -1526739.6960300000       -480181.15948600002     
 Grounding Line, (x,y)  -1526618.8431899999       -482026.11147800001     
 Grounding Line, (x,y)  -1526575.9040300001       -481461.15590100002     
 Grounding Line, (x,y)  -1528927.5391700000       -476566.55936700001     
 Grounding Line, (x,y)  -1528651.3949899999       -476017.19843400002     
 Grounding Line, (x,y)  -1527468.8909400001       -478698.59321800002     
 Grounding Line, (x,y)  -1527176.7439999999       -479150.47724199999     
 Grounding Line, (x,y)  -1528324.5395200001       -477356.92847400001     
 Grounding Line, (x,y)  -1528807.7440400000       -477259.45942000003     
 Grounding Line, (x,y)  -1526591.4979099999       -480957.93621299998     
 Grounding Line, (x,y)  -1527415.7381500001       -483970.80263200001     
 Grounding Line, (x,y)  -1526861.9523400001       -483837.28773699998     
 Grounding Line, (x,y)  -1526859.2587800000       -479667.43050399999     
 Grounding Line, (x,y)  -1527409.9659299999       -479606.07716500002     
 Grounding Line, (x,y)  -1527713.0546299999       -478183.71406000003     
 Grounding Line, (x,y)  -1528123.8738400000       -478120.74345900002     
 Grounding Line, (x,y)  -1527966.3665600000       -477680.86970400001     
 Grounding Line, (x,y)  -1526783.7391400000       -483387.08493499999     
 Grounding Line, (x,y)  -1526986.4390100001       -482971.10833000002     
 Grounding Line, (x,y)  -1524315.7097700001       -453857.77003800002     
 Grounding Line, (x,y)  -1524139.2900400001       -453360.47075500002     
 Grounding Line, (x,y)  -1522455.0918300000       -456391.53855800000     
 Grounding Line, (x,y)  -1521274.1427000000       -458092.17786100000     
 Grounding Line, (x,y)  -1521068.6894600000       -458549.35573499999     
 Grounding Line, (x,y)  -1519341.2342900001       -462803.44240100001     
 Grounding Line, (x,y)  -1522008.2888100001       -464005.45577499998     
 Grounding Line, (x,y)  -1519815.7585100001       -460090.70853200002     
 Grounding Line, (x,y)  -1518943.0596200000       -461400.60863799998     
 Grounding Line, (x,y)  -1518979.4287099999       -461843.27893500001     
 Grounding Line, (x,y)  -1524440.6092099999       -452825.50266499998     
 Grounding Line, (x,y)  -1525032.6830600000       -451975.89296999999     
 Grounding Line, (x,y)  -1520393.8635199999       -459178.28413200000     
 Grounding Line, (x,y)  -1526117.1082800000       -463707.32284600002     
 Grounding Line, (x,y)  -1519511.3893299999       -460575.96004500001     
 Grounding Line, (x,y)  -1522269.4171400000       -456940.74789800000     
 Grounding Line, (x,y)  -1524724.7705399999       -452385.48646599997     
 Grounding Line, (x,y)  -1525631.2072099999       -463601.23165999999     
 Grounding Line, (x,y)  -1519337.9110300001       -462217.00565000001     
 Grounding Line, (x,y)  -1520065.7902100000       -459632.08738200000     
 Grounding Line, (x,y)  -1521439.0164600001       -457521.28250899998     
 Grounding Line, (x,y)  -1523421.5736799999       -454863.62732799997     
 Grounding Line, (x,y)  -1523425.8875800001       -454302.54859399999     
 Grounding Line, (x,y)  -1520155.0988200000       -463414.31243300001     
 Grounding Line, (x,y)  -1519394.3045099999       -461180.09915199998     
 Grounding Line, (x,y)  -1525493.2239900001       -451413.02211700001     
 Grounding Line, (x,y)  -1525287.7381700000       -464008.53895100002     
 Grounding Line, (x,y)  -1523801.6897300000       -453894.09212500002     
 Grounding Line, (x,y)  -1522832.8336100001       -455892.28335899999     
 Grounding Line, (x,y)  -1525022.8047199999       -451458.16119600000     
 Grounding Line, (x,y)  -1519724.8527299999       -463540.13321100001     
 Grounding Line, (x,y)  -1519351.5629100001       -463304.80595700000     
 Grounding Line, (x,y)  -1520859.5131900001       -458972.91784100002     
 Grounding Line, (x,y)  -1520586.2783800000       -464105.34949300002     
 Grounding Line, (x,y)  -1524761.8535300000       -463965.83267999999     
 Grounding Line, (x,y)  -1521708.1482200001       -457101.50498899998     
 Grounding Line, (x,y)  -1526627.0398599999       -463772.78879399999     
 Grounding Line, (x,y)  -1521039.9056400000       -464176.74155699997     
 Grounding Line, (x,y)  -1520122.0789800000       -463920.29314500000     
 Grounding Line, (x,y)  -1523107.4972999999       -455411.72720199998     
 Grounding Line, (x,y)  -1522008.2888100001       -464005.45577499998     
 Grounding Line, (x,y)  -1521531.9027799999       -464273.63556600001     
 Grounding Line, (x,y)  -1522391.3377799999       -464259.35997699999     
 Grounding Line, (x,y)  -1532916.5454899999       -467539.67063700000     
 Grounding Line, (x,y)  -1528827.5090000001       -475455.13531600003     
 Grounding Line, (x,y)  -1528651.3949899999       -476017.19843400002     
 Grounding Line, (x,y)  -1532361.4983300001       -471995.79174900003     
 Grounding Line, (x,y)  -1522854.8654100001       -463919.36921199999     
 Grounding Line, (x,y)  -1532994.5166100000       -471322.84618400002     
 Grounding Line, (x,y)  -1532618.5612900001       -470927.36005999998     
 Grounding Line, (x,y)  -1521039.9056400000       -464176.74155699997     
 Grounding Line, (x,y)  -1530139.2678600000       -472294.85162999999     
 Grounding Line, (x,y)  -1530641.5414900000       -472181.63404600002     
 Grounding Line, (x,y)  -1523367.6261400001       -464316.86066300003     
 Grounding Line, (x,y)  -1532471.0396700001       -471460.37686500000     
 Grounding Line, (x,y)  -1531807.2259600000       -472171.46019800002     
 Grounding Line, (x,y)  -1529506.4104299999       -473529.48508499999     
 Grounding Line, (x,y)  -1533052.3756800001       -468508.63409599999     
 Grounding Line, (x,y)  -1532957.5119900000       -468989.31400399999     
 Grounding Line, (x,y)  -1533256.4336099999       -469316.90930399997     
 Grounding Line, (x,y)  -1529189.5774999999       -474007.36428099999     
 Grounding Line, (x,y)  -1532556.5991799999       -467811.20512900001     
 Grounding Line, (x,y)  -1523714.2004100000       -463921.15645200002     
 Grounding Line, (x,y)  -1532750.6136200000       -470068.51493000000     
 Grounding Line, (x,y)  -1532802.0522300000       -470500.74838900001     
 Grounding Line, (x,y)  -1529614.9089899999       -473006.22805799998     
 Grounding Line, (x,y)  -1530076.9265800000       -472758.81512799999     
 Grounding Line, (x,y)  -1531189.5236100000       -472077.92958400003     
 Grounding Line, (x,y)  -1524233.4212400001       -464007.87594699999     
 Grounding Line, (x,y)  -1529063.6390100000       -474448.49859099998     
 Grounding Line, (x,y)  -1533243.9173600001       -469848.93733400002     
 Grounding Line, (x,y)  -1524761.8535300000       -463965.83267999999     
 Grounding Line, (x,y)  -1528779.1559100000       -474837.58528900001     
 Grounding Line, (x,y)  -1532625.1392500000       -468270.96875300002     
 Grounding Line, (x,y)  -1592669.3522200000       -450740.24599099997     
 Grounding Line, (x,y)  -1597273.6586300000       -446860.35096200003     
 Grounding Line, (x,y)  -1596742.6462600001       -446993.83015499997     
 Grounding Line, (x,y)  -1591045.5873400001       -454823.08573200001     
 Grounding Line, (x,y)  -1599226.7350300001       -445455.05777299998     
 Grounding Line, (x,y)  -1591870.5049600000       -455205.34942699998     
 Grounding Line, (x,y)  -1590717.7458500001       -455204.96145800001     
 Grounding Line, (x,y)  -1598584.4588599999       -444585.76779200003     
 Grounding Line, (x,y)  -1597966.7035699999       -444767.16658100003     
 Grounding Line, (x,y)  -1589797.1148099999       -455406.04469299997     
 Grounding Line, (x,y)  -1592515.8633800000       -452037.55181799998     
 Grounding Line, (x,y)  -1591220.6002900000       -456116.10477099998     
 Grounding Line, (x,y)  -1591277.5079500000       -455419.79463100003     
 Grounding Line, (x,y)  -1598897.5319099999       -444959.89102300000     
 Grounding Line, (x,y)  -1597824.9206300001       -445333.85244500003     
 Grounding Line, (x,y)  -1592830.3698000000       -451571.66556900000     
 Grounding Line, (x,y)  -1596485.2020200000       -447563.00075200002     
 Grounding Line, (x,y)  -1588348.8513199999       -456412.79553300003     
 Grounding Line, (x,y)  -1593902.2080800000       -449979.78592599998     
 Grounding Line, (x,y)  -1592084.9414299999       -453398.82262599998     
 Grounding Line, (x,y)  -1595407.4954899999       -448480.96588899998     
 Grounding Line, (x,y)  -1592346.0286600001       -452534.94630299998     
 Grounding Line, (x,y)  -1592415.9991100000       -452978.12359199999     
 Grounding Line, (x,y)  -1597685.1878200001       -445827.11603500001     
 Grounding Line, (x,y)  -1593036.6316199999       -450462.84758700000     
 Grounding Line, (x,y)  -1592717.6055900001       -453502.96478799998     
 Grounding Line, (x,y)  -1599433.2485900000       -444919.05159200000     
 Grounding Line, (x,y)  -1589143.0236599999       -456168.86981599999     
 Grounding Line, (x,y)  -1588841.6497100000       -456507.16019999998     
 Grounding Line, (x,y)  -1589451.9191999999       -455815.97027699999     
 Grounding Line, (x,y)  -1589010.5775400000       -455698.10866199998     
 Grounding Line, (x,y)  -1597883.8404099999       -447414.46875399997     
 Grounding Line, (x,y)  -1595042.8864300000       -450023.66527499998     
 Grounding Line, (x,y)  -1595400.6914400000       -449725.89121799998     
 Grounding Line, (x,y)  -1596550.0372299999       -449188.17135000002     
 Grounding Line, (x,y)  -1598249.4622400000       -445711.44417400000     
 Grounding Line, (x,y)  -1594279.7591200001       -449555.88766600000     
 Grounding Line, (x,y)  -1590744.1938300000       -456179.65125699999     
 Grounding Line, (x,y)  -1597463.7750100000       -447731.18613400002     
 Grounding Line, (x,y)  -1597470.6881599999       -448319.62393700000     
 Grounding Line, (x,y)  -1594739.9026500001       -450398.65213499998     
 Grounding Line, (x,y)  -1594046.2214100000       -450982.04268399999     
 Grounding Line, (x,y)  -1594431.1544500000       -450733.24244599999     
 Grounding Line, (x,y)  -1597859.8959100000       -446818.92310399999     
 Grounding Line, (x,y)  -1596205.7576800000       -449523.92636200000     
 Grounding Line, (x,y)  -1594136.4714400000       -451388.27824700001     
 Grounding Line, (x,y)  -1593744.8928600000       -452305.44500700000     
 Grounding Line, (x,y)  -1593836.8151600000       -451753.78070599999     
 Grounding Line, (x,y)  -1597461.3095499999       -446352.57008199999     
 Grounding Line, (x,y)  -1596976.9439500000       -448420.94830699998     
 Grounding Line, (x,y)  -1593830.8559200000       -452781.93323700002     
 Grounding Line, (x,y)  -1598828.7286300000       -445802.58645399997     
 Grounding Line, (x,y)  -1593364.3677800000       -452759.28664399998     
 Grounding Line, (x,y)  -1593242.7802299999       -453297.82009499997     
 Grounding Line, (x,y)  -1526865.4599400000       -450367.73606099997     
 Grounding Line, (x,y)  -1527386.6592699999       -450361.88105000003     
 Grounding Line, (x,y)  -1527692.2681799999       -450843.36476600001     
 Grounding Line, (x,y)  -1525275.1447900000       -450918.16862200003     
 Grounding Line, (x,y)  -1525648.2790300001       -450766.40382599999     
 Grounding Line, (x,y)  -1526372.8302700000       -450395.07942099997     
 Grounding Line, (x,y)  -1525502.3822399999       -450357.09960700001     
 Grounding Line, (x,y)  -1525493.2239900001       -451413.02211700001     
 Grounding Line, (x,y)  -1528100.6848500001       -451068.07039399998     
 Grounding Line, (x,y)  -1526057.1684500000       -450138.86185699998     
 Grounding Line, (x,y)  -1542597.2657300001       -439206.44017700001     
 Grounding Line, (x,y)  -1542737.3040700001       -439728.43737200001     
 Grounding Line, (x,y)  -1544522.4899400000       -441992.98160699999     
 Grounding Line, (x,y)  -1544613.9309000000       -442519.27982499998     
 Grounding Line, (x,y)  -1543672.8470000001       -443256.42118399998     
 Grounding Line, (x,y)  -1543975.9774400000       -443746.47255700000     
 Grounding Line, (x,y)  -1545797.4927000001       -439046.54337299999     
 Grounding Line, (x,y)  -1545315.5128800001       -438954.99142400001     
 Grounding Line, (x,y)  -1544586.3989800001       -443038.34084800002     
 Grounding Line, (x,y)  -1544988.0928199999       -443300.73287200002     
 Grounding Line, (x,y)  -1544112.2107400000       -440895.03635200002     
 Grounding Line, (x,y)  -1543909.0741399999       -440447.51743900002     
 Grounding Line, (x,y)  -1543167.5877000000       -439794.76419800002     
 Grounding Line, (x,y)  -1543521.7585900000       -440112.94507999998     
 Grounding Line, (x,y)  -1545388.7755100001       -438032.86358200002     
 Grounding Line, (x,y)  -1545503.3190899999       -439521.75196099997     
 Grounding Line, (x,y)  -1541998.0239800001       -439309.86124300002     
 Grounding Line, (x,y)  -1544842.7762400000       -441594.04454400000     
 Grounding Line, (x,y)  -1544555.2010800000       -441124.47496100003     
 Grounding Line, (x,y)  -1544164.3551500000       -443328.34530200000     
 Grounding Line, (x,y)  -1544025.5672800001       -442811.54546200001     
 Grounding Line, (x,y)  -1546105.6505199999       -441187.36065200000     
 Grounding Line, (x,y)  -1545123.4169500000       -442424.72820800002     
 Grounding Line, (x,y)  -1545520.0534600001       -442122.65814299998     
 Grounding Line, (x,y)  -1546498.2620800000       -440753.40720900003     
 Grounding Line, (x,y)  -1545058.9756700001       -442861.84272600000     
 Grounding Line, (x,y)  -1545800.9871100001       -441624.14430900000     
 Grounding Line, (x,y)  -1545071.7145900000       -438433.20360499999     
 Grounding Line, (x,y)  -1545798.7653000001       -439942.16376099997     
 Grounding Line, (x,y)  -1545747.8974200001       -440383.30353099998     
 Grounding Line, (x,y)  -1545980.2244100000       -440756.19316299999     
 Grounding Line, (x,y)  -1531501.5241400001       -448607.58341500000     
 Grounding Line, (x,y)  -1531028.4856900000       -449045.54634100001     
 Grounding Line, (x,y)  -1532330.3372500001       -446801.62000200001     
 Grounding Line, (x,y)  -1532832.4179400001       -446469.01806300000     
 Grounding Line, (x,y)  -1530716.3337800000       -449980.51856200001     
 Grounding Line, (x,y)  -1531127.3320299999       -449650.22730600002     
 Grounding Line, (x,y)  -1529663.2045000000       -450792.16584899998     
 Grounding Line, (x,y)  -1529901.7142800000       -450333.10891900002     
 Grounding Line, (x,y)  -1530369.2312400001       -450272.02375599998     
 Grounding Line, (x,y)  -1532806.1141600001       -445947.24802399997     
 Grounding Line, (x,y)  -1532761.7245199999       -445295.09558000002     
 Grounding Line, (x,y)  -1528100.6848500001       -451068.07039399998     
 Grounding Line, (x,y)  -1532323.5413700000       -447408.33155700000     
 Grounding Line, (x,y)  -1529123.2997300001       -450894.55627200002     
 Grounding Line, (x,y)  -1528610.8120599999       -450979.37887000002     
 Grounding Line, (x,y)  -1533169.8864899999       -445083.92163400003     
 Grounding Line, (x,y)  -1532276.3463300001       -447909.80301400000     
 Grounding Line, (x,y)  -1531840.8028700000       -448160.86115600000     
 Grounding Line, (x,y)  -1565166.8211699999       -416783.63972899999     
 Grounding Line, (x,y)  -1564792.8400999999       -417121.90649199998     
 Grounding Line, (x,y)  -1562765.6761200000       -417078.27353300003     
 Grounding Line, (x,y)  -1565716.0265400000       -416590.30690600001     
 Grounding Line, (x,y)  -1564268.0885999999       -416984.46478300000     
 Grounding Line, (x,y)  -1561489.8244400001       -414814.71769500000     
 Grounding Line, (x,y)  -1564684.7695400000       -419387.28078099998     
 Grounding Line, (x,y)  -1565067.6486100000       -419192.23919499997     
 Grounding Line, (x,y)  -1563560.6211300001       -417814.49882300000     
 Grounding Line, (x,y)  -1562937.1020599999       -417684.46867099998     
 Grounding Line, (x,y)  -1564057.0941999999       -410716.28246399999     
 Grounding Line, (x,y)  -1563532.7884500001       -410950.48077800003     
 Grounding Line, (x,y)  -1562227.2593300000       -421709.19680199999     
 Grounding Line, (x,y)  -1561342.0007000000       -413637.48363199999     
 Grounding Line, (x,y)  -1561442.2430700001       -414241.95214299997     
 Grounding Line, (x,y)  -1564908.1429699999       -410840.42830600002     
 Grounding Line, (x,y)  -1565509.5261700000       -410599.89374899998     
 Grounding Line, (x,y)  -1561477.0310300000       -415982.38623300003     
 Grounding Line, (x,y)  -1561340.1965000001       -416516.33762900002     
 Grounding Line, (x,y)  -1561705.0723600001       -421660.41943200002     
 Grounding Line, (x,y)  -1562460.9124400001       -422175.98387400003     
 Grounding Line, (x,y)  -1563704.8210400001       -419758.53442300000     
 Grounding Line, (x,y)  -1563871.6903299999       -417428.01185499999     
 Grounding Line, (x,y)  -1561179.2503300000       -421627.80330299999     
 Grounding Line, (x,y)  -1561985.3070700001       -412244.74473400001     
 Grounding Line, (x,y)  -1562429.0863099999       -412004.87443600001     
 Grounding Line, (x,y)  -1562173.0597900001       -416943.74875199998     
 Grounding Line, (x,y)  -1563195.2033700000       -411491.92607599997     
 Grounding Line, (x,y)  -1562946.7424699999       -412056.80648500001     
 Grounding Line, (x,y)  -1560280.7751800001       -422103.73408700002     
 Grounding Line, (x,y)  -1564217.5975100000       -419637.13035499997     
 Grounding Line, (x,y)  -1562386.8297400000       -420778.61924700002     
 Grounding Line, (x,y)  -1562038.7241799999       -421254.73074400000     
 Grounding Line, (x,y)  -1561879.5637600000       -412817.58136700001     
 Grounding Line, (x,y)  -1562591.8303499999       -420312.98585900001     
 Grounding Line, (x,y)  -1562959.6551600001       -420043.22794800001     
 Grounding Line, (x,y)  -1564401.2825900000       -410948.83410699997     
 Grounding Line, (x,y)  -1561594.8129600000       -415409.91450600000     
 Grounding Line, (x,y)  -1561330.5530500000       -413063.42780200002     
 Grounding Line, (x,y)  -1565982.1706500000       -410171.74487300002     
 Grounding Line, (x,y)  -1563295.4916800000       -419791.03395499999     
 Grounding Line, (x,y)  -1560618.4718299999       -421675.33221800003     
 Grounding Line, (x,y)  -1561704.0316600001       -416845.25555800000     
 Grounding Line, (x,y)  -1568972.8457599999       -406098.24731200002     
 Grounding Line, (x,y)  -1568733.8699600000       -405663.95623700001     
 Grounding Line, (x,y)  -1569029.3684200000       -405244.82067099999     
 Grounding Line, (x,y)  -1572714.7294099999       -402397.88246200001     
 Grounding Line, (x,y)  -1573057.2840900000       -402073.21256100002     
 Grounding Line, (x,y)  -1572348.9649000000       -402816.60522199998     
 Grounding Line, (x,y)  -1574268.4418299999       -400108.14496300003     
 Grounding Line, (x,y)  -1574702.7452400001       -399722.37041500001     
 Grounding Line, (x,y)  -1573875.6746400001       -397335.63670600002     
 Grounding Line, (x,y)  -1575028.0723200000       -399226.71104000002     
 Grounding Line, (x,y)  -1574463.7433499999       -398747.00238500000     
 Grounding Line, (x,y)  -1569362.7274799999       -409577.35231500003     
 Grounding Line, (x,y)  -1569064.7118800001       -410159.12690500001     
 Grounding Line, (x,y)  -1568535.0045700001       -410526.56538400002     
 Grounding Line, (x,y)  -1569259.3934299999       -404825.87224499998     
 Grounding Line, (x,y)  -1567463.1391199999       -410151.38708399999     
 Grounding Line, (x,y)  -1573331.5635200001       -400678.15394900000     
 Grounding Line, (x,y)  -1573157.5338800000       -401663.08219500002     
 Grounding Line, (x,y)  -1568009.1173600000       -410270.78933599999     
 Grounding Line, (x,y)  -1565982.1706500000       -410171.74487300002     
 Grounding Line, (x,y)  -1570969.3848200000       -418281.37135799997     
 Grounding Line, (x,y)  -1566212.5978200000       -416914.63665200002     
 Grounding Line, (x,y)  -1570399.8303900000       -418867.47175400000     
 Grounding Line, (x,y)  -1570848.3478399999       -418713.09640099999     
 Grounding Line, (x,y)  -1569004.0538000001       -422817.48940399999     
 Grounding Line, (x,y)  -1565716.0265400000       -416590.30690600001     
 Grounding Line, (x,y)  -1570302.7062599999       -419388.70553400001     
 Grounding Line, (x,y)  -1570484.9613500000       -418294.16118699999     
 Grounding Line, (x,y)  -1566226.7669599999       -417515.67392899998     
 Grounding Line, (x,y)  -1570004.7302200000       -419755.90956200002     
 Grounding Line, (x,y)  -1566004.2043699999       -418054.17431300000     
 Grounding Line, (x,y)  -1565067.6486100000       -419192.23919499997     
 Grounding Line, (x,y)  -1565283.6451399999       -418801.50083600002     
 Grounding Line, (x,y)  -1565605.4729800001       -418405.57533800002     
 Grounding Line, (x,y)  -1573875.6746400001       -397335.63670600002     
 Grounding Line, (x,y)  -1573611.2667000000       -396947.95125400001     
 Grounding Line, (x,y)  -1574415.0230000000       -387882.16169699997     
 Grounding Line, (x,y)  -1574369.3108999999       -387350.27191399998     
 Grounding Line, (x,y)  -1573544.0066100000       -388971.46081999998     
 Grounding Line, (x,y)  -1573921.1292800000       -388649.62883900001     
 Grounding Line, (x,y)  -1573348.9604400001       -396522.48416200001     
 Grounding Line, (x,y)  -1573536.8683700000       -394251.02094199997     
 Grounding Line, (x,y)  -1572386.6732900001       -390562.70078200003     
 Grounding Line, (x,y)  -1574390.7189700000       -388400.98225300002     
 Grounding Line, (x,y)  -1572997.1824600000       -391450.43128899997     
 Grounding Line, (x,y)  -1573450.0238099999       -392434.28989000001     
 Grounding Line, (x,y)  -1573889.7930099999       -392615.80982000002     
 Grounding Line, (x,y)  -1572568.0238900001       -391052.78410699998     
 Grounding Line, (x,y)  -1573342.6625300001       -391874.74507000000     
 Grounding Line, (x,y)  -1572298.1156599999       -390163.68881399999     
 Grounding Line, (x,y)  -1572542.8458499999       -389711.49720200000     
 Grounding Line, (x,y)  -1573822.9426899999       -393959.24324400001     
 Grounding Line, (x,y)  -1573861.5576500001       -393584.12320999999     
 Grounding Line, (x,y)  -1573918.6333000001       -393120.38195399998     
 Grounding Line, (x,y)  -1574296.7154000001       -393346.13705399999     
 Grounding Line, (x,y)  -1572831.9919799999       -395733.57757800003     
 Grounding Line, (x,y)  -1573086.0129600000       -396147.48843700002     
 Grounding Line, (x,y)  -1573237.0375600001       -389208.26448299998     
 Grounding Line, (x,y)  -1573056.2467900000       -394418.11570899998     
 Grounding Line, (x,y)  -1572827.5964100000       -394816.82968700002     
 Grounding Line, (x,y)  -1572732.1482100000       -389186.76268799999     
 Grounding Line, (x,y)  -1573077.4006200000       -395248.79292099999     
 Grounding Line, (x,y)  -1579737.0370499999       -380174.24656599999     
 Grounding Line, (x,y)  -1579766.5879500001       -380710.10976199998     
 Grounding Line, (x,y)  -1574257.0590900001       -386851.27204499999     
 Grounding Line, (x,y)  -1577590.2328500000       -382379.12122099998     
 Grounding Line, (x,y)  -1577145.8470600001       -382573.00105800002     
 Grounding Line, (x,y)  -1577282.7192500001       -383182.71204299998     
 Grounding Line, (x,y)  -1574808.3687000000       -385917.44143800001     
 Grounding Line, (x,y)  -1574918.1998500000       -385445.01593100000     
 Grounding Line, (x,y)  -1575271.5497200000       -385127.83851500001     
 Grounding Line, (x,y)  -1580029.7405399999       -379815.97146299999     
 Grounding Line, (x,y)  -1575506.9883399999       -384657.97352399997     
 Grounding Line, (x,y)  -1574464.4922300000       -386269.44765099999     
 Grounding Line, (x,y)  -1576806.9606100000       -383048.91066900000     
 Grounding Line, (x,y)  -1578880.8491400001       -381591.83100499999     
 Grounding Line, (x,y)  -1578372.3784399999       -381555.97585799999     
 Grounding Line, (x,y)  -1574962.4634700001       -386292.92499199999     
 Grounding Line, (x,y)  -1577899.9246499999       -381966.25668300001     
 Grounding Line, (x,y)  -1575686.6084000000       -384180.82961700001     
 Grounding Line, (x,y)  -1576285.9559899999       -384174.95414099999     
 Grounding Line, (x,y)  -1576422.0055499999       -383400.45196400001     
 Grounding Line, (x,y)  -1574369.3108999999       -387350.27191399998     
 Grounding Line, (x,y)  -1576002.2231200000       -383729.55443900003     
 Grounding Line, (x,y)  -1547657.0887200001       -434593.71292899997     
 Grounding Line, (x,y)  -1550312.0556099999       -432396.29267699999     
 Grounding Line, (x,y)  -1546026.8481200000       -437107.63849600003     
 Grounding Line, (x,y)  -1546255.2134900000       -436615.38914200000     
 Grounding Line, (x,y)  -1557424.3411800000       -431322.77496399998     
 Grounding Line, (x,y)  -1557005.6091600000       -431749.99546900002     
 Grounding Line, (x,y)  -1556671.8862800000       -432179.91516400001     
 Grounding Line, (x,y)  -1546904.6527900000       -435054.37532599998     
 Grounding Line, (x,y)  -1547130.2901099999       -434507.95866300003     
 Grounding Line, (x,y)  -1548241.4150400001       -433518.67272799998     
 Grounding Line, (x,y)  -1553237.0208999999       -434770.77653400000     
 Grounding Line, (x,y)  -1554425.5617000000       -435870.95020700002     
 Grounding Line, (x,y)  -1553578.8729000001       -435301.32993399998     
 Grounding Line, (x,y)  -1548316.4909300001       -432952.76567699999     
 Grounding Line, (x,y)  -1558471.0845600001       -429699.17304600001     
 Grounding Line, (x,y)  -1558866.1337500000       -429364.60992900003     
 Grounding Line, (x,y)  -1552021.5267099999       -433309.99828200002     
 Grounding Line, (x,y)  -1548779.7487100000       -432678.83546500001     
 Grounding Line, (x,y)  -1549285.5008799999       -432470.70247800002     
 Grounding Line, (x,y)  -1555249.6720000000       -434526.34445600002     
 Grounding Line, (x,y)  -1555032.8279599999       -435111.55403499998     
 Grounding Line, (x,y)  -1557527.5244900000       -430786.19847900001     
 Grounding Line, (x,y)  -1556432.3980800000       -432928.67095399997     
 Grounding Line, (x,y)  -1546499.4915400001       -436125.30555300001     
 Grounding Line, (x,y)  -1546734.5737200000       -435804.18336500000     
 Grounding Line, (x,y)  -1554066.0980700001       -435355.35459000000     
 Grounding Line, (x,y)  -1553123.6565800000       -434131.01861799997     
 Grounding Line, (x,y)  -1545516.2778700001       -437139.03667599999     
 Grounding Line, (x,y)  -1556211.5444799999       -432534.96753500000     
 Grounding Line, (x,y)  -1547574.2797999999       -434187.23565300001     
 Grounding Line, (x,y)  -1552594.9677400000       -433130.54755100003     
 Grounding Line, (x,y)  -1552840.7572900001       -433653.76338900003     
 Grounding Line, (x,y)  -1557898.7827999999       -430574.79096900002     
 Grounding Line, (x,y)  -1552168.1559400000       -432909.05086800002     
 Grounding Line, (x,y)  -1545388.7755100001       -438032.86358200002     
 Grounding Line, (x,y)  -1555615.8831799999       -433671.92736300000     
 Grounding Line, (x,y)  -1551338.2668600001       -432480.69933999999     
 Grounding Line, (x,y)  -1551803.4952700001       -432609.76764500001     
 Grounding Line, (x,y)  -1545212.9088399999       -437537.47977300000     
 Grounding Line, (x,y)  -1558101.5690700000       -430161.35814199998     
 Grounding Line, (x,y)  -1546670.7705699999       -435432.70459699997     
 Grounding Line, (x,y)  -1554571.9080900000       -435294.79027400003     
 Grounding Line, (x,y)  -1550843.6348800000       -432549.59021699999     
 Grounding Line, (x,y)  -1547724.2216800000       -433765.90825199999     
 Grounding Line, (x,y)  -1556000.4263500001       -433141.55259099999     
 Grounding Line, (x,y)  -1555241.0469800001       -434035.81168099999     
 Grounding Line, (x,y)  -1549790.7936000000       -432421.86361599999     
 Grounding Line, (x,y)  -1557749.9361900000       -423046.47129600000     
 Grounding Line, (x,y)  -1558281.9362300001       -423014.14520099998     
 Grounding Line, (x,y)  -1559221.3352699999       -422434.65666400001     
 Grounding Line, (x,y)  -1558617.6174600001       -428244.38257500000     
 Grounding Line, (x,y)  -1558765.5904500000       -428852.92556000000     
 Grounding Line, (x,y)  -1556522.8510700001       -427451.33334200003     
 Grounding Line, (x,y)  -1555912.9395300001       -427464.77288200002     
 Grounding Line, (x,y)  -1558647.6038700000       -422708.21453100001     
 Grounding Line, (x,y)  -1555292.6181099999       -427267.77656899998     
 Grounding Line, (x,y)  -1557151.9406399999       -423016.26192199998     
 Grounding Line, (x,y)  -1557113.3042700000       -427508.28722900001     
 Grounding Line, (x,y)  -1554921.9793000000       -424154.30555100000     
 Grounding Line, (x,y)  -1555240.0554800001       -423785.15587500000     
 Grounding Line, (x,y)  -1560280.7751800001       -422103.73408700002     
 Grounding Line, (x,y)  -1555195.1010900000       -424585.87934599997     
 Grounding Line, (x,y)  -1555683.9721599999       -423611.55648899998     
 Grounding Line, (x,y)  -1556090.4689400000       -423284.62538699998     
 Grounding Line, (x,y)  -1555131.2656400001       -426794.58303099999     
 Grounding Line, (x,y)  -1554802.6050900000       -426238.33370000002     
 Grounding Line, (x,y)  -1555060.3228900000       -425133.76987399999     
 Grounding Line, (x,y)  -1556438.4938600000       -423486.98119800002     
 Grounding Line, (x,y)  -1556577.0054599999       -422957.43125199998     
 Grounding Line, (x,y)  -1557683.1649499999       -427821.66341099999     
 Grounding Line, (x,y)  -1559721.8797599999       -421948.68146499997     
 Grounding Line, (x,y)  -1558866.1337500000       -429364.60992900003     
 Grounding Line, (x,y)  -1558010.9021999999       -428273.80027100001     
 Grounding Line, (x,y)  -1554731.0137900000       -425622.99943400000     
GroundedSolver: Done
Loading user function library: [ElmerIceSolvers]...[GroundedSolver_post]
 Grounding Line, (x,y)  -1527001.6709000000       -482493.84230999998     
 Grounding Line, (x,y)  -1531902.9165399999       -465826.49731200002     
 Grounding Line, (x,y)  -1530374.8389099999       -462254.70568499999     
 Grounding Line, (x,y)  -1532311.6711100000       -466775.58934499999     
 Grounding Line, (x,y)  -1531563.5852099999       -466227.88926899998     
 Grounding Line, (x,y)  -1531815.7710200001       -466668.87073800003     
 Grounding Line, (x,y)  -1528075.0508800000       -463259.13369799999     
 Grounding Line, (x,y)  -1527531.0197699999       -463459.46892800002     
 Grounding Line, (x,y)  -1530858.9003399999       -462384.43852500001     
 Grounding Line, (x,y)  -1532916.5454899999       -467539.67063700000     
 Grounding Line, (x,y)  -1532556.5991799999       -467811.20512900001     
 Grounding Line, (x,y)  -1529963.4044200000       -462651.02741400001     
 Grounding Line, (x,y)  -1529525.7184599999       -462989.46541200002     
 Grounding Line, (x,y)  -1530906.9284900001       -465093.92123500002     
 Grounding Line, (x,y)  -1531344.8462700001       -465225.62697300001     
 Grounding Line, (x,y)  -1527106.5789099999       -463738.68723899999     
 Grounding Line, (x,y)  -1530991.1233500000       -464289.55532900000     
 Grounding Line, (x,y)  -1531397.9068499999       -465744.20264199999     
 Grounding Line, (x,y)  -1530621.0474700001       -464701.65110100002     
 Grounding Line, (x,y)  -1528534.0764100000       -463511.61386899999     
 Grounding Line, (x,y)  -1532008.7896799999       -467144.15012000001     
 Grounding Line, (x,y)  -1532125.2174100000       -467635.63572399999     
 Grounding Line, (x,y)  -1530957.5444600000       -463495.59168700001     
 Grounding Line, (x,y)  -1530597.1078200000       -463218.36533399997     
 Grounding Line, (x,y)  -1529020.3709600000       -463220.43870000000     
 Grounding Line, (x,y)  -1530461.3506300000       -462790.70308399998     
 Grounding Line, (x,y)  -1526627.0398599999       -463772.78879399999     
 Grounding Line, (x,y)  -1530834.1673800000       -463886.42196499999     
 Grounding Line, (x,y)  -1590450.8604600001       -456480.68301099999     
 Grounding Line, (x,y)  -1594989.3222500000       -448906.06308900000     
 Grounding Line, (x,y)  -1596506.8350899999       -448186.72593999997     
 Grounding Line, (x,y)  -1588679.9691999999       -456008.07418100000     
 Grounding Line, (x,y)  -1594552.7306400000       -449169.41118200001     
 Grounding Line, (x,y)  -1596903.8791400001       -448868.98882000003     
 Grounding Line, (x,y)  -1589572.8537300001       -456363.80513200001     
 Grounding Line, (x,y)  -1593038.1345800001       -451076.46880999999     
 Grounding Line, (x,y)  -1595932.3635100001       -448442.84944700002     
 Grounding Line, (x,y)  -1593488.3484300000       -450326.45604399999     
 Grounding Line, (x,y)  -1590317.3370500000       -455545.28521499998     
 Grounding Line, (x,y)  -1595772.3189500000       -449410.25209800003     
 Grounding Line, (x,y)  -1538357.4747100000       -442967.66135000001     
 Grounding Line, (x,y)  -1537631.1288699999       -442432.89679799997     
 Grounding Line, (x,y)  -1537910.7017000001       -441956.92882400000     
 Grounding Line, (x,y)  -1538628.7280200000       -443445.27893299999     
 Grounding Line, (x,y)  -1537606.2346300001       -441521.76529800001     
 Grounding Line, (x,y)  -1535570.8100699999       -443933.05725200003     
 Grounding Line, (x,y)  -1536212.2134700001       -443803.67560500000     
 Grounding Line, (x,y)  -1537751.2401099999       -441044.57832500001     
 Grounding Line, (x,y)  -1538183.9470800001       -440947.90572699998     
 Grounding Line, (x,y)  -1540166.6371700000       -440144.94121800002     
 Grounding Line, (x,y)  -1541114.1115200000       -439862.51569099998     
 Grounding Line, (x,y)  -1541120.9097200001       -439384.08466100000     
 Grounding Line, (x,y)  -1537219.7195900001       -443950.65101400000     
 Grounding Line, (x,y)  -1538396.4347600001       -440613.25027399999     
 Grounding Line, (x,y)  -1538786.4702800000       -440359.51565199997     
 Grounding Line, (x,y)  -1533994.2365000001       -443986.49888400000     
 Grounding Line, (x,y)  -1534469.7149000000       -443772.65560000000     
 Grounding Line, (x,y)  -1534008.2751600000       -444535.94699299999     
 Grounding Line, (x,y)  -1536726.5684799999       -443710.89144199999     
 Grounding Line, (x,y)  -1535036.1396699999       -443659.99840099999     
 Grounding Line, (x,y)  -1539969.3828100001       -439666.40718799998     
 Grounding Line, (x,y)  -1539481.9994699999       -439864.75715500000     
 Grounding Line, (x,y)  -1537708.1468100001       -443609.68743599998     
 Grounding Line, (x,y)  -1538127.7318200001       -443387.28704999998     
 Grounding Line, (x,y)  -1537747.8508299999       -443042.03083700000     
 Grounding Line, (x,y)  -1540573.2506500001       -439654.30151399999     
 Grounding Line, (x,y)  -1541560.9298300000       -439218.61073800002     
 Grounding Line, (x,y)  -1541998.0239800001       -439309.86124300002     
 Grounding Line, (x,y)  -1539066.6104500000       -439853.34782299999     
 Grounding Line, (x,y)  -1533444.2416900001       -444631.70479799999     
 Grounding Line, (x,y)  -1533169.8864899999       -445083.92163400003     
MAIN: 
MAIN: -------------------------------------
MAIN: Time: 1/76:   2.000E-01
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper:  Active coordinate mapping time:    9.9000000000071253E-005
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0078 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
DetectExtrudedStructure: Determining extruded structure
DetectExtrudedStructure: Unit vector of direction:   0.000   0.000   1.000
DetectExtrudedStructure: determine top and bottom pointers
DetectExtrudedStructure: Layered structure detected in 14 cycles
DetectExtrudedStructure:  Top and bottom pointer init time:    3.0830000000001689E-003
DetectExtrudedStructure: Top and bottom pointer init rounds: 14
DetectExtrudedStructure: Number of nodes at the top: 504
DetectExtrudedStructure: Number of nodes at the bottom: 504
StructuredProjectToPlane: Created variable: depth
StructuredProjectToPlane: Created variable: height
StructuredProjectToPlane:  Projection time:    0.0000000000000000
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
List_ToListMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 1205892
List_ToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
List_ToListMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 28044
List_ToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
GetHydrostaticLoads: Memory allocation done.
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
List_ToListMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 2143808
List_ToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: Enforcing relative pressure relaxation
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.86150703E-06  2.0000000     ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    90.28   96.74 (s)
FlowSolve: iter:    1 Assembly: (s)    2.05    2.05
FlowSolve: iter:    1 Solve:    (s)   90.28   90.28
FlowSolve:  Result Norm     :    8.6150702706879549E-007
FlowSolve:  Relative Change :    2.0000000000000000
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.22600016E-04  1.8531200     ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    89.76   94.70 (s)
FlowSolve: iter:    2 Assembly: (s)    1.98    4.03
FlowSolve: iter:    2 Solve:    (s)   89.76  180.04
FlowSolve:  Result Norm     :    2.2600015799424886E-005
FlowSolve:  Relative Change :    1.8531200155352323
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=3) (NRM,RELC): ( 0.32457229E-03  1.7396104     ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    94.01   98.07 (s)
FlowSolve: iter:    3 Assembly: (s)    1.99    6.02
FlowSolve: iter:    3 Solve:    (s)   94.01  274.06
FlowSolve:  Result Norm     :    3.2457228517384880E-004
FlowSolve:  Relative Change :    1.7396103809426353
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=4) (NRM,RELC): ( 0.20213091E-02  1.4465666     ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    94.95  100.35 (s)
FlowSolve: iter:    4 Assembly: (s)    1.98    8.00
FlowSolve: iter:    4 Solve:    (s)   94.95  369.00
FlowSolve:  Result Norm     :    2.0213090976369465E-003
FlowSolve:  Relative Change :    1.4465665867812090
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=5) (NRM,RELC): ( 0.68743308E-02  1.0911012     ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    90.88   95.95 (s)
FlowSolve: iter:    5 Assembly: (s)    1.98    9.97
FlowSolve: iter:    5 Solve:    (s)   90.88  459.88
FlowSolve:  Result Norm     :    6.8743307659005388E-003
FlowSolve:  Relative Change :    1.0911012007479619
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           6
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=6) (NRM,RELC): ( 0.15529184E-01 0.77263349     ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    91.12   95.71 (s)
FlowSolve: iter:    6 Assembly: (s)    1.99   11.96
FlowSolve: iter:    6 Solve:    (s)   91.12  551.00
FlowSolve:  Result Norm     :    1.5529183501436046E-002
FlowSolve:  Relative Change :   0.77263349242970614
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           7
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=7) (NRM,RELC): ( 0.26664311E-01 0.52781252     ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    89.64   95.53 (s)
FlowSolve: iter:    7 Assembly: (s)    1.98   13.95
FlowSolve: iter:    7 Solve:    (s)   89.64  640.64
FlowSolve:  Result Norm     :    2.6664310704431229E-002
FlowSolve:  Relative Change :   0.52781251766755899
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           8
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=8) (NRM,RELC): ( 0.38118967E-01 0.35363003     ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    91.00   97.08 (s)
FlowSolve: iter:    8 Assembly: (s)    1.99   15.94
FlowSolve: iter:    8 Solve:    (s)   91.00  731.64
FlowSolve:  Result Norm     :    3.8118966833830092E-002
FlowSolve:  Relative Change :   0.35363002813908845
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           9
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=9) (NRM,RELC): ( 0.48242042E-01 0.23443625     ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    90.07   95.44 (s)
FlowSolve: iter:    9 Assembly: (s)    1.98   17.91
FlowSolve: iter:    9 Solve:    (s)   90.07  821.71
FlowSolve:  Result Norm     :    4.8242042455820575E-002
FlowSolve:  Relative Change :   0.23443625092518716
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          10
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=10) (NRM,RELC): ( 0.56319193E-01 0.15449609     ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    94.91   99.51 (s)
FlowSolve: iter:   10 Assembly: (s)    2.12   20.03
FlowSolve: iter:   10 Solve:    (s)   94.91  916.62
FlowSolve:  Result Norm     :    5.6319193460162474E-002
FlowSolve:  Relative Change :   0.15449608898716624
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          11
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=11) (NRM,RELC): ( 0.62338857E-01 0.10146237     ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    91.26   97.03 (s)
FlowSolve: iter:   11 Assembly: (s)    1.99   22.02
FlowSolve: iter:   11 Solve:    (s)   91.26 1007.89
FlowSolve:  Result Norm     :    6.2338856976822454E-002
FlowSolve:  Relative Change :   0.10146237013824543
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          12
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=12) (NRM,RELC): ( 0.66626633E-01 0.66494941E-01 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.38   97.32 (s)
FlowSolve: iter:   12 Assembly: (s)    1.98   24.00
FlowSolve: iter:   12 Solve:    (s)   92.38 1100.26
FlowSolve:  Result Norm     :    6.6626633284889825E-002
FlowSolve:  Relative Change :    6.6494940613432307E-002
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          13
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=13) (NRM,RELC): ( 0.69590921E-01 0.43522852E-01 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.49   97.75 (s)
FlowSolve: iter:   13 Assembly: (s)    2.12   26.12
FlowSolve: iter:   13 Solve:    (s)   92.49 1192.75
FlowSolve:  Result Norm     :    6.9590921494985039E-002
FlowSolve:  Relative Change :    4.3522851586720250E-002
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          14
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=14) (NRM,RELC): ( 0.71600377E-01 0.28464302E-01 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    95.32  100.86 (s)
FlowSolve: iter:   14 Assembly: (s)    1.96   28.08
FlowSolve: iter:   14 Solve:    (s)   95.32 1288.07
FlowSolve:  Result Norm     :    7.1600377405217200E-002
FlowSolve:  Relative Change :    2.8464302345606970E-002
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          15
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=15) (NRM,RELC): ( 0.72945127E-01 0.18606592E-01 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    90.70   97.35 (s)
FlowSolve: iter:   15 Assembly: (s)    1.98   30.06
FlowSolve: iter:   15 Solve:    (s)   90.70 1378.77
FlowSolve:  Result Norm     :    7.2945127053102396E-002
FlowSolve:  Relative Change :    1.8606592476529925E-002
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          16
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=16) (NRM,RELC): ( 0.73837490E-01 0.12158968E-01 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.42   97.11 (s)
FlowSolve: iter:   16 Assembly: (s)    1.98   32.04
FlowSolve: iter:   16 Solve:    (s)   92.42 1471.19
FlowSolve:  Result Norm     :    7.3837489640226503E-002
FlowSolve:  Relative Change :    1.2158968237887584E-002
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          17
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=17) (NRM,RELC): ( 0.74426396E-01 0.79440355E-02 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.86   97.96 (s)
FlowSolve: iter:   17 Assembly: (s)    1.98   34.03
FlowSolve: iter:   17 Solve:    (s)   92.86 1564.06
FlowSolve:  Result Norm     :    7.4426396428271493E-002
FlowSolve:  Relative Change :    7.9440355120992210E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          18
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=18) (NRM,RELC): ( 0.74813644E-01 0.51895874E-02 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    89.33   94.55 (s)
FlowSolve: iter:   18 Assembly: (s)    1.99   36.01
FlowSolve: iter:   18 Solve:    (s)   89.33 1653.39
FlowSolve:  Result Norm     :    7.4813643544736769E-002
FlowSolve:  Relative Change :    5.1895874128057478E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          19
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=19) (NRM,RELC): ( 0.75067688E-01 0.33899455E-02 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    88.56   93.79 (s)
FlowSolve: iter:   19 Assembly: (s)    1.98   38.00
FlowSolve: iter:   19 Solve:    (s)   88.56 1741.95
FlowSolve:  Result Norm     :    7.5067688317720205E-002
FlowSolve:  Relative Change :    3.3899454965688157E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          20
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=20) (NRM,RELC): ( 0.75234094E-01 0.22142898E-02 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    91.19   95.96 (s)
FlowSolve: iter:   20 Assembly: (s)    1.98   39.98
FlowSolve: iter:   20 Solve:    (s)   91.19 1833.14
FlowSolve:  Result Norm     :    7.5234094171837462E-002
FlowSolve:  Relative Change :    2.2142898289156175E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          21
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=21) (NRM,RELC): ( 0.75342986E-01 0.14463286E-02 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    88.99   94.65 (s)
FlowSolve: iter:   21 Assembly: (s)    1.98   41.95
FlowSolve: iter:   21 Solve:    (s)   88.99 1922.13
FlowSolve:  Result Norm     :    7.5342986140261775E-002
FlowSolve:  Relative Change :    1.4463285939482129E-003
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          22
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=22) (NRM,RELC): ( 0.75414197E-01 0.94470469E-03 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    86.91   93.91 (s)
FlowSolve: iter:   22 Assembly: (s)    1.98   43.93
FlowSolve: iter:   22 Solve:    (s)   86.91 2009.03
FlowSolve:  Result Norm     :    7.5414196649205775E-002
FlowSolve:  Relative Change :    9.4470469169546185E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          23
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=23) (NRM,RELC): ( 0.75460746E-01 0.61705747E-03 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    89.19   95.50 (s)
FlowSolve: iter:   23 Assembly: (s)    1.98   45.91
FlowSolve: iter:   23 Solve:    (s)   89.19 2098.22
FlowSolve:  Result Norm     :    7.5460745904645257E-002
FlowSolve:  Relative Change :    6.1705747358104044E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          24
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=24) (NRM,RELC): ( 0.75491166E-01 0.40304931E-03 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    91.26   96.91 (s)
FlowSolve: iter:   24 Assembly: (s)    2.12   48.04
FlowSolve: iter:   24 Solve:    (s)   91.26 2189.48
FlowSolve:  Result Norm     :    7.5491166436361071E-002
FlowSolve:  Relative Change :    4.0304930549130521E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          25
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=25) (NRM,RELC): ( 0.75511043E-01 0.26326643E-03 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.29   97.96 (s)
FlowSolve: iter:   25 Assembly: (s)    1.99   50.02
FlowSolve: iter:   25 Solve:    (s)   92.29 2281.77
FlowSolve:  Result Norm     :    7.5511043342648229E-002
FlowSolve:  Relative Change :    2.6326642922971992E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          26
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=26) (NRM,RELC): ( 0.75524030E-01 0.17196447E-03 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    94.88   99.33 (s)
FlowSolve: iter:   26 Assembly: (s)    2.08   52.10
FlowSolve: iter:   26 Solve:    (s)   94.89 2376.66
FlowSolve:  Result Norm     :    7.5524029675748477E-002
FlowSolve:  Relative Change :    1.7196446945361542E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          27
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=27) (NRM,RELC): ( 0.75532514E-01 0.11232818E-03 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    93.50   97.90 (s)
FlowSolve: iter:   27 Assembly: (s)    1.98   54.08
FlowSolve: iter:   27 Solve:    (s)   93.50 2470.15
FlowSolve:  Result Norm     :    7.5532513629112008E-002
FlowSolve:  Relative Change :    1.1232818093034701E-004
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          28
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=28) (NRM,RELC): ( 0.75538056E-01 0.73374657E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.64   98.71 (s)
FlowSolve: iter:   28 Assembly: (s)    1.98   56.07
FlowSolve: iter:   28 Solve:    (s)   92.64 2562.80
FlowSolve:  Result Norm     :    7.5538056004703785E-002
FlowSolve:  Relative Change :    7.3374656694702231E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          29
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=29) (NRM,RELC): ( 0.75541677E-01 0.47930424E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.83   98.32 (s)
FlowSolve: iter:   29 Assembly: (s)    1.98   58.05
FlowSolve: iter:   29 Solve:    (s)   92.83 2655.63
FlowSolve:  Result Norm     :    7.5541676662542509E-002
FlowSolve:  Relative Change :    4.7930424217764503E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          30
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=30) (NRM,RELC): ( 0.75544042E-01 0.31310110E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    89.42   95.47 (s)
FlowSolve: iter:   30 Assembly: (s)    1.98   60.03
FlowSolve: iter:   30 Solve:    (s)   89.42 2745.04
FlowSolve:  Result Norm     :    7.5544041917765078E-002
FlowSolve:  Relative Change :    3.1310109847506915E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          31
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=31) (NRM,RELC): ( 0.75545587E-01 0.20453439E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    89.49   95.65 (s)
FlowSolve: iter:   31 Assembly: (s)    1.98   62.01
FlowSolve: iter:   31 Solve:    (s)   89.49 2834.53
FlowSolve:  Result Norm     :    7.5545587069006367E-002
FlowSolve:  Relative Change :    2.0453438818414737E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          32
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=32) (NRM,RELC): ( 0.75546596E-01 0.13361548E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    88.73   93.86 (s)
FlowSolve: iter:   32 Assembly: (s)    1.98   64.00
FlowSolve: iter:   32 Solve:    (s)   88.73 2923.27
FlowSolve:  Result Norm     :    7.5546596481752049E-002
FlowSolve:  Relative Change :    1.3361548188123307E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          33
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=33) (NRM,RELC): ( 0.75547256E-01 0.87288297E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    95.79  100.09 (s)
FlowSolve: iter:   33 Assembly: (s)    1.97   65.97
FlowSolve: iter:   33 Solve:    (s)   95.79 3019.05
FlowSolve:  Result Norm     :    7.5547255918005346E-002
FlowSolve:  Relative Change :    8.7288297018563633E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          34
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=34) (NRM,RELC): ( 0.75548499E-01 0.16448461E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    87.32   93.41 (s)
FlowSolve: iter:   34 Assembly: (s)    2.00   67.97
FlowSolve: iter:   34 Solve:    (s)   87.32 3106.37
FlowSolve:  Result Norm     :    7.5548498564305747E-002
FlowSolve:  Relative Change :    1.6448460840719185E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION          35
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=35) (NRM,RELC): ( 0.75548499E-01 0.11203497E-08 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    88.61   94.92 (s)
FlowSolve: iter:   35 Assembly: (s)    1.99   69.96
FlowSolve: iter:   35 Solve:    (s)   88.61 3194.98
FlowSolve:  Result Norm     :    7.5548498648946485E-002
FlowSolve:  Relative Change :    1.1203497147293310E-009
Loading user function library: [FlowSolve]...[FlowSolver_post]
SolverActivate: Solver time (CPU,REAL) for navier-stokes:  3265.30 3456.21 (s)
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: resultoutput
ResultOutputSolver: -------------------------------------
ResultOutputSolver: Saving with prefix: tg_sr_0528_run2
ResultOutputSolver: Working on mesh:
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Creating list for saving - if not present
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
VtuOutputSolver: Saving results in VTK XML format with prefix: tg_sr_0528_run2
VtuOutputSolver: Saving number of partitions: 128
SolverOutputDirectory: Creating directory: ./vtuoutputs
GenerateSaveMask: Number of active elements 15156 out of 15156
GenerateSaveMask: Number of geometry nodes 7560 out of 7560
VtuOutputSolver: Total number of geometry nodes to save: 993615
VtuOutputSolver: Total number of dof nodes to save: 993615
VtuOutputSolver: Total number of elements to save: 1961726
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the vtu file: ./vtuoutputs/tg_sr_0528_run2_128np001_t0001.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
ResultOutputSolver: -------------------------------------
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_post]
List_ToListMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 3116
List_ToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: lower free surface
FreeSurfaceSolver (fs lower): Solving for free surface
FreeSurfaceSolver (fs lower): Using Dirichlet method for limitation
FreeSurfaceSolver (fs lower): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs lower): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs lower): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs lower): Mesh dimension: 3
FreeSurfaceSolver (fs lower): Size of problem: 504
FreeSurfaceSolver (fs lower): Memory allocations done
FreeSurfaceSolver (fs lower): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.9610E-13
       1 0.9610E-13
ComputeChange: NS (ITER=1) (NRM,RELC): (  963.42663      2.0000000     ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662933097301
FreeSurfaceSolver (fs lower):  Relative Change :    2.0000000000000000
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 36
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.6213E-14
       1 0.6213E-14
ComputeChange: NS (ITER=2) (NRM,RELC): (  963.42663     0.54281191E-14 ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662933096778
FreeSurfaceSolver (fs lower):  Relative Change :    5.4281191488612995E-015
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 34
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Converged after2 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
List_ToListMatrix: Matrix format changed from CRS to List
List_ToCRSMatrix: Number of entries in CRS matrix: 3116
List_ToCRSMatrix: Matrix format changed from List to CRS
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: upper free surface
FreeSurfaceSolver (fs upper): Solving for free surface
FreeSurfaceSolver (fs upper): Using Dirichlet method for limitation
FreeSurfaceSolver (fs upper): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs upper): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs upper): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs upper): Mesh dimension: 3
FreeSurfaceSolver (fs upper): Size of problem: 504
FreeSurfaceSolver (fs upper): Memory allocations done
FreeSurfaceSolver (fs upper): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.5512E-13
       1 0.5512E-13
ComputeChange: NS (ITER=1) (NRM,RELC): (  1255.2469      2.0000000     ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749201466
FreeSurfaceSolver (fs upper):  Relative Change :    2.0000000000000000
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Non-linear Iteration 2 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.2759E-14
       1 0.2759E-14
ComputeChange: NS (ITER=2) (NRM,RELC): (  1255.2469     0.18113861E-15 ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749201469
FreeSurfaceSolver (fs upper):  Relative Change :    1.8113861104629048E-016
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Converged after2 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./TG_SR_0528_Run2.result.0
SaveResult: Done writing results file
SaveResult: -----------------------------------------
MAIN: 
MAIN: -------------------------------------
MAIN: Time: 2/76:   2.000E-01
MAIN: Estimated time left: 72           hours
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: There seems to be 90 (out of 7560) limited heights!
StructuredMeshMapper:  Active coordinate mapping time:    3.1799999987924821E-004
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0212 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:    3.2700000019758590E-004
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.75548236E-01 0.34765590E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.67   98.61 (s)
FlowSolve: iter:    1 Assembly: (s)    2.00    2.00
FlowSolve: iter:    1 Solve:    (s)   92.67   92.67
FlowSolve:  Result Norm     :    7.5548236000593794E-002
FlowSolve:  Relative Change :    3.4765589514697206E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.75547743E-01 0.65309319E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    94.88  100.60 (s)
FlowSolve: iter:    2 Assembly: (s)    2.18    4.18
FlowSolve: iter:    2 Solve:    (s)   94.88  187.55
FlowSolve:  Result Norm     :    7.5547742601817111E-002
FlowSolve:  Relative Change :    6.5309319446660257E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=3) (NRM,RELC): ( 0.75547743E-01 0.38008769E-09 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    93.46   98.57 (s)
FlowSolve: iter:    3 Assembly: (s)    1.99    6.18
FlowSolve: iter:    3 Solve:    (s)   93.46  281.01
FlowSolve:  Result Norm     :    7.5547742573102344E-002
FlowSolve:  Relative Change :    3.8008768617142015E-010
Loading user function library: [FlowSolve]...[FlowSolver_post]
SolverActivate: Solver time (CPU,REAL) for navier-stokes:   287.18  304.05 (s)
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: resultoutput
ResultOutputSolver: -------------------------------------
ResultOutputSolver: Working on mesh:
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
GenerateSaveMask: Number of active elements 15156 out of 15156
GenerateSaveMask: Number of geometry nodes 7560 out of 7560
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the vtu file: ./vtuoutputs/tg_sr_0528_run2_128np001_t0002.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
ResultOutputSolver: -------------------------------------
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: lower free surface
FreeSurfaceSolver (fs lower): Solving for free surface
FreeSurfaceSolver (fs lower): Using Dirichlet method for limitation
FreeSurfaceSolver (fs lower): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs lower): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs lower): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs lower): Mesh dimension: 3
FreeSurfaceSolver (fs lower): Size of problem: 504
FreeSurfaceSolver (fs lower): Memory allocations done
FreeSurfaceSolver (fs lower): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.1153E-12
       1 0.1153E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  963.42663     0.72704936E-11 ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662933797237
FreeSurfaceSolver (fs lower):  Relative Change :    7.2704935895125285E-012
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 33
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: upper free surface
FreeSurfaceSolver (fs upper): Solving for free surface
FreeSurfaceSolver (fs upper): Using Dirichlet method for limitation
FreeSurfaceSolver (fs upper): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs upper): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs upper): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs upper): Mesh dimension: 3
FreeSurfaceSolver (fs upper): Size of problem: 504
FreeSurfaceSolver (fs upper): Memory allocations done
FreeSurfaceSolver (fs upper): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.6615E-13
       1 0.6615E-13
ComputeChange: NS (ITER=1) (NRM,RELC): (  1255.2469     0.51370910E-12 ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749195020
FreeSurfaceSolver (fs upper):  Relative Change :    5.1370910092741166E-013
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./TG_SR_0528_Run2.result.0
SaveResult: Done writing results file
SaveResult: -----------------------------------------
MAIN: 
MAIN: -------------------------------------
MAIN: Time: 3/76:   2.000E-01
MAIN: Estimated time left:  6.3 hours
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: There seems to be 105 (out of 7560) limited heights!
StructuredMeshMapper:  Active coordinate mapping time:    3.6200000022290624E-004
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0071 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:    2.9499999982363079E-004
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.75547428E-01 0.41703942E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    89.26   94.87 (s)
FlowSolve: iter:    1 Assembly: (s)    1.98    1.98
FlowSolve: iter:    1 Solve:    (s)   89.26   89.26
FlowSolve:  Result Norm     :    7.5547427509889256E-002
FlowSolve:  Relative Change :    4.1703942345108676E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.75546836E-01 0.78343440E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    93.13   99.30 (s)
FlowSolve: iter:    2 Assembly: (s)    2.00    3.98
FlowSolve: iter:    2 Solve:    (s)   93.13  182.39
FlowSolve:  Result Norm     :    7.5546835647674532E-002
FlowSolve:  Relative Change :    7.8343439698593855E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=3) (NRM,RELC): ( 0.75546836E-01 0.45767683E-09 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.33   98.53 (s)
FlowSolve: iter:    3 Assembly: (s)    2.06    6.04
FlowSolve: iter:    3 Solve:    (s)   92.33  274.72
FlowSolve:  Result Norm     :    7.5546835613098495E-002
FlowSolve:  Relative Change :    4.5767683305158913E-010
Loading user function library: [FlowSolve]...[FlowSolver_post]
SolverActivate: Solver time (CPU,REAL) for navier-stokes:   280.76  298.89 (s)
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: resultoutput
ResultOutputSolver: -------------------------------------
ResultOutputSolver: Working on mesh:
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
GenerateSaveMask: Number of active elements 15156 out of 15156
GenerateSaveMask: Number of geometry nodes 7560 out of 7560
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the vtu file: ./vtuoutputs/tg_sr_0528_run2_128np001_t0003.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
ResultOutputSolver: -------------------------------------
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: lower free surface
FreeSurfaceSolver (fs lower): Solving for free surface
FreeSurfaceSolver (fs lower): Using Dirichlet method for limitation
FreeSurfaceSolver (fs lower): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs lower): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs lower): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs lower): Mesh dimension: 3
FreeSurfaceSolver (fs lower): Size of problem: 504
FreeSurfaceSolver (fs lower): Memory allocations done
FreeSurfaceSolver (fs lower): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.1384E-12
       1 0.1384E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  963.42663     0.87247575E-11 ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662934637804
FreeSurfaceSolver (fs lower):  Relative Change :    8.7247575109715280E-012
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.01    0.01
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 46
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: upper free surface
FreeSurfaceSolver (fs upper): Solving for free surface
FreeSurfaceSolver (fs upper): Using Dirichlet method for limitation
FreeSurfaceSolver (fs upper): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs upper): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs upper): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs upper): Mesh dimension: 3
FreeSurfaceSolver (fs upper): Size of problem: 504
FreeSurfaceSolver (fs upper): Memory allocations done
FreeSurfaceSolver (fs upper): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.7937E-13
       1 0.7937E-13
ComputeChange: NS (ITER=1) (NRM,RELC): (  1255.2469     0.61641469E-12 ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749187283
FreeSurfaceSolver (fs upper):  Relative Change :    6.1641469339103298E-013
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./TG_SR_0528_Run2.result.0
SaveResult: Done writing results file
SaveResult: -----------------------------------------
MAIN: 
MAIN: -------------------------------------
MAIN: Time: 4/76:   2.001E-01
MAIN: Estimated time left:  6.1 hours
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: There seems to be 105 (out of 7560) limited heights!
StructuredMeshMapper:  Active coordinate mapping time:    2.4799999982860754E-004
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0079 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:    3.2000000010157237E-004
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.75546458E-01 0.50044302E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    89.14   95.53 (s)
FlowSolve: iter:    1 Assembly: (s)    2.05    2.05
FlowSolve: iter:    1 Solve:    (s)   89.14   89.14
FlowSolve:  Result Norm     :    7.5546457545179690E-002
FlowSolve:  Relative Change :    5.0044301888204384E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.75545747E-01 0.94011487E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    90.87   96.53 (s)
FlowSolve: iter:    2 Assembly: (s)    2.02    4.07
FlowSolve: iter:    2 Solve:    (s)   90.87  180.02
FlowSolve:  Result Norm     :    7.5545747325038520E-002
FlowSolve:  Relative Change :    9.4011486797776133E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=3) (NRM,RELC): ( 0.75545747E-01 0.53484588E-09 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    90.43   94.84 (s)
FlowSolve: iter:    3 Assembly: (s)    2.00    6.07
FlowSolve: iter:    3 Solve:    (s)   90.43  270.44
FlowSolve:  Result Norm     :    7.5545747284633188E-002
FlowSolve:  Relative Change :    5.3484588212593195E-010
Loading user function library: [FlowSolve]...[FlowSolver_post]
SolverActivate: Solver time (CPU,REAL) for navier-stokes:   276.51  293.07 (s)
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: resultoutput
ResultOutputSolver: -------------------------------------
ResultOutputSolver: Working on mesh:
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
GenerateSaveMask: Number of active elements 15156 out of 15156
GenerateSaveMask: Number of geometry nodes 7560 out of 7560
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the vtu file: ./vtuoutputs/tg_sr_0528_run2_128np001_t0004.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
ResultOutputSolver: -------------------------------------
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: lower free surface
FreeSurfaceSolver (fs lower): Solving for free surface
FreeSurfaceSolver (fs lower): Using Dirichlet method for limitation
FreeSurfaceSolver (fs lower): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs lower): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs lower): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs lower): Mesh dimension: 3
FreeSurfaceSolver (fs lower): Size of problem: 504
FreeSurfaceSolver (fs lower): Memory allocations done
FreeSurfaceSolver (fs lower): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.1661E-12
       1 0.1661E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  963.42663     0.10469544E-10 ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662935646467
FreeSurfaceSolver (fs lower):  Relative Change :    1.0469543809439088E-011
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 30
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: upper free surface
FreeSurfaceSolver (fs upper): Solving for free surface
FreeSurfaceSolver (fs upper): Using Dirichlet method for limitation
FreeSurfaceSolver (fs upper): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs upper): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs upper): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs upper): Mesh dimension: 3
FreeSurfaceSolver (fs upper): Size of problem: 504
FreeSurfaceSolver (fs upper): Memory allocations done
FreeSurfaceSolver (fs upper): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.9525E-13
       1 0.9525E-13
ComputeChange: NS (ITER=1) (NRM,RELC): (  1255.2469     0.73977009E-12 ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749177997
FreeSurfaceSolver (fs upper):  Relative Change :    7.3977008751415975E-013
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./TG_SR_0528_Run2.result.0
SaveResult: Done writing results file
SaveResult: -----------------------------------------
MAIN: 
MAIN: -------------------------------------
MAIN: Time: 5/76:   2.001E-01
MAIN: Estimated time left:  5.9 hours
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: There seems to be 105 (out of 7560) limited heights!
StructuredMeshMapper:  Active coordinate mapping time:    3.1800000033399556E-004
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0077 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:    0.0000000000000000
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.75545294E-01 0.60052570E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    93.74   99.14 (s)
FlowSolve: iter:    1 Assembly: (s)    2.05    2.05
FlowSolve: iter:    1 Solve:    (s)   93.74   93.74
FlowSolve:  Result Norm     :    7.5545293614369916E-002
FlowSolve:  Relative Change :    6.0052569705463442E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.75544441E-01 0.11281279E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.87   97.32 (s)
FlowSolve: iter:    2 Assembly: (s)    2.21    4.26
FlowSolve: iter:    2 Solve:    (s)   92.87  186.62
FlowSolve:  Result Norm     :    7.5544441371622820E-002
FlowSolve:  Relative Change :    1.1281279263278112E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=3) (NRM,RELC): ( 0.75544441E-01 0.63987004E-09 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.72   98.08 (s)
FlowSolve: iter:    3 Assembly: (s)    2.06    6.32
FlowSolve: iter:    3 Solve:    (s)   92.72  279.34
FlowSolve:  Result Norm     :    7.5544441323284195E-002
FlowSolve:  Relative Change :    6.3987004083173978E-010
Loading user function library: [FlowSolve]...[FlowSolver_post]
SolverActivate: Solver time (CPU,REAL) for navier-stokes:   285.66  300.96 (s)
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: resultoutput
ResultOutputSolver: -------------------------------------
ResultOutputSolver: Working on mesh:
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
GenerateSaveMask: Number of active elements 15156 out of 15156
GenerateSaveMask: Number of geometry nodes 7560 out of 7560
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the vtu file: ./vtuoutputs/tg_sr_0528_run2_128np001_t0005.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
ResultOutputSolver: -------------------------------------
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: lower free surface
FreeSurfaceSolver (fs lower): Solving for free surface
FreeSurfaceSolver (fs lower): Using Dirichlet method for limitation
FreeSurfaceSolver (fs lower): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs lower): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs lower): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs lower): Mesh dimension: 3
FreeSurfaceSolver (fs lower): Size of problem: 504
FreeSurfaceSolver (fs lower): Memory allocations done
FreeSurfaceSolver (fs lower): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.1993E-12
       1 0.1993E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  963.42663     0.12563146E-10 ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662936856834
FreeSurfaceSolver (fs lower):  Relative Change :    1.2563145764447729E-011
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 68
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: upper free surface
FreeSurfaceSolver (fs upper): Solving for free surface
FreeSurfaceSolver (fs upper): Using Dirichlet method for limitation
FreeSurfaceSolver (fs upper): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs upper): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs upper): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs upper): Mesh dimension: 3
FreeSurfaceSolver (fs upper): Size of problem: 504
FreeSurfaceSolver (fs upper): Memory allocations done
FreeSurfaceSolver (fs upper): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.1143E-12
       1 0.1143E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  1255.2469     0.88776033E-12 ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749166853
FreeSurfaceSolver (fs upper):  Relative Change :    8.8776033273992337E-013
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./TG_SR_0528_Run2.result.0
SaveResult: Done writing results file
SaveResult: -----------------------------------------
MAIN: 
MAIN: -------------------------------------
MAIN: Time: 6/76:   2.001E-01
MAIN: Estimated time left:  6.0 hours
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: There seems to be 105 (out of 7560) limited heights!
StructuredMeshMapper:  Active coordinate mapping time:    3.2300000020768493E-004
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0076 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:    3.4899999991466757E-004
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.75543897E-01 0.72062344E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    91.11   96.62 (s)
FlowSolve: iter:    1 Assembly: (s)    2.01    2.01
FlowSolve: iter:    1 Solve:    (s)   91.11   91.11
FlowSolve:  Result Norm     :    7.5543896934291171E-002
FlowSolve:  Relative Change :    7.2062344361134445E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.75542874E-01 0.13537416E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    90.79   95.63 (s)
FlowSolve: iter:    2 Assembly: (s)    2.24    4.24
FlowSolve: iter:    2 Solve:    (s)   90.79  181.90
FlowSolve:  Result Norm     :    7.5542874272046562E-002
FlowSolve:  Relative Change :    1.3537416101281739E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=3) (NRM,RELC): ( 0.75542874E-01 0.75900179E-09 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    89.99   95.75 (s)
FlowSolve: iter:    3 Assembly: (s)    2.00    6.24
FlowSolve: iter:    3 Solve:    (s)   89.99  271.89
FlowSolve:  Result Norm     :    7.5542874214709385E-002
FlowSolve:  Relative Change :    7.5900178868622251E-010
Loading user function library: [FlowSolve]...[FlowSolver_post]
SolverActivate: Solver time (CPU,REAL) for navier-stokes:   278.13  294.40 (s)
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: resultoutput
ResultOutputSolver: -------------------------------------
ResultOutputSolver: Working on mesh:
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
GenerateSaveMask: Number of active elements 15156 out of 15156
GenerateSaveMask: Number of geometry nodes 7560 out of 7560
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the vtu file: ./vtuoutputs/tg_sr_0528_run2_128np001_t0006.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
ResultOutputSolver: -------------------------------------
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: lower free surface
FreeSurfaceSolver (fs lower): Solving for free surface
FreeSurfaceSolver (fs lower): Using Dirichlet method for limitation
FreeSurfaceSolver (fs lower): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs lower): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs lower): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs lower): Mesh dimension: 3
FreeSurfaceSolver (fs lower): Size of problem: 504
FreeSurfaceSolver (fs lower): Memory allocations done
FreeSurfaceSolver (fs lower): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.2391E-12
       1 0.2391E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  963.42663     0.15075303E-10 ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662938309229
FreeSurfaceSolver (fs lower):  Relative Change :    1.5075302906768190E-011
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 14
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: upper free surface
FreeSurfaceSolver (fs upper): Solving for free surface
FreeSurfaceSolver (fs upper): Using Dirichlet method for limitation
FreeSurfaceSolver (fs upper): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs upper): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs upper): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs upper): Mesh dimension: 3
FreeSurfaceSolver (fs upper): Size of problem: 504
FreeSurfaceSolver (fs upper): Memory allocations done
FreeSurfaceSolver (fs upper): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.1371E-12
       1 0.1371E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  1255.2469     0.10650950E-11 ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749153484
FreeSurfaceSolver (fs upper):  Relative Change :    1.0650950329556922E-012
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./TG_SR_0528_Run2.result.0
SaveResult: Done writing results file
SaveResult: -----------------------------------------
MAIN: 
MAIN: -------------------------------------
MAIN: Time: 7/76:   2.002E-01
MAIN: Estimated time left:  5.8 hours
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: There seems to be 105 (out of 7560) limited heights!
StructuredMeshMapper:  Active coordinate mapping time:    3.1100000069272937E-004
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0069 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:    2.5600000026315683E-004
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.75542221E-01 0.86473697E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    91.53   97.19 (s)
FlowSolve: iter:    1 Assembly: (s)    2.00    2.00
FlowSolve: iter:    1 Solve:    (s)   91.53   91.53
FlowSolve:  Result Norm     :    7.5542220970371332E-002
FlowSolve:  Relative Change :    8.6473697124497489E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.75540994E-01 0.16244718E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    93.21   99.28 (s)
FlowSolve: iter:    2 Assembly: (s)    2.01    4.01
FlowSolve: iter:    2 Solve:    (s)   93.21  184.74
FlowSolve:  Result Norm     :    7.5540993818257476E-002
FlowSolve:  Relative Change :    1.6244718059150974E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=3) (NRM,RELC): ( 0.75540994E-01 0.89537302E-09 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    90.17   95.00 (s)
FlowSolve: iter:    3 Assembly: (s)    2.01    6.03
FlowSolve: iter:    3 Solve:    (s)   90.17  274.91
FlowSolve:  Result Norm     :    7.5540993750620108E-002
FlowSolve:  Relative Change :    8.9537302251681353E-010
Loading user function library: [FlowSolve]...[FlowSolver_post]
SolverActivate: Solver time (CPU,REAL) for navier-stokes:   280.94  297.59 (s)
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: resultoutput
ResultOutputSolver: -------------------------------------
ResultOutputSolver: Working on mesh:
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
GenerateSaveMask: Number of active elements 15156 out of 15156
GenerateSaveMask: Number of geometry nodes 7560 out of 7560
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the vtu file: ./vtuoutputs/tg_sr_0528_run2_128np001_t0007.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
ResultOutputSolver: -------------------------------------
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: lower free surface
FreeSurfaceSolver (fs lower): Solving for free surface
FreeSurfaceSolver (fs lower): Using Dirichlet method for limitation
FreeSurfaceSolver (fs lower): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs lower): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs lower): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs lower): Mesh dimension: 3
FreeSurfaceSolver (fs lower): Size of problem: 504
FreeSurfaceSolver (fs lower): Memory allocations done
FreeSurfaceSolver (fs lower): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.2869E-12
       1 0.2869E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  963.42663     0.18090151E-10 ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662940052082
FreeSurfaceSolver (fs lower):  Relative Change :    1.8090151083159506E-011
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 22
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: upper free surface
FreeSurfaceSolver (fs upper): Solving for free surface
FreeSurfaceSolver (fs upper): Using Dirichlet method for limitation
FreeSurfaceSolver (fs upper): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs upper): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs upper): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs upper): Mesh dimension: 3
FreeSurfaceSolver (fs upper): Size of problem: 504
FreeSurfaceSolver (fs upper): Memory allocations done
FreeSurfaceSolver (fs upper): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.1646E-12
       1 0.1646E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  1255.2469     0.12781140E-11 ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749137440
FreeSurfaceSolver (fs upper):  Relative Change :    1.2781140395483280E-012
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./TG_SR_0528_Run2.result.0
SaveResult: Done writing results file
SaveResult: -----------------------------------------
MAIN: 
MAIN: -------------------------------------
MAIN: Time: 8/76:   2.002E-01
MAIN: Estimated time left:  5.7 hours
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: There seems to be 105 (out of 7560) limited heights!
StructuredMeshMapper:  Active coordinate mapping time:    2.7700000009645009E-004
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0070 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:    5.5500000053143594E-004
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.75540210E-01 0.10376677E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    93.20   97.89 (s)
FlowSolve: iter:    1 Assembly: (s)    2.14    2.14
FlowSolve: iter:    1 Solve:    (s)   93.20   93.20
FlowSolve:  Result Norm     :    7.5540209890185353E-002
FlowSolve:  Relative Change :    1.0376677122841121E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.75539699E-01 0.67667128E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    93.17   98.29 (s)
FlowSolve: iter:    2 Assembly: (s)    1.99    4.13
FlowSolve: iter:    2 Solve:    (s)   93.17  186.37
FlowSolve:  Result Norm     :    7.5539698733011362E-002
FlowSolve:  Relative Change :    6.7667127766884003E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=3) (NRM,RELC): ( 0.75538737E-01 0.12727015E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    90.99   97.35 (s)
FlowSolve: iter:    3 Assembly: (s)    2.00    6.13
FlowSolve: iter:    3 Solve:    (s)   90.99  277.36
FlowSolve:  Result Norm     :    7.5538737344244808E-002
FlowSolve:  Relative Change :    1.2727015072657525E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=4) (NRM,RELC): ( 0.75538737E-01 0.71397745E-09 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    88.07   93.75 (s)
FlowSolve: iter:    4 Assembly: (s)    1.99    8.12
FlowSolve: iter:    4 Solve:    (s)   88.07  365.43
FlowSolve:  Result Norm     :    7.5538737290311853E-002
FlowSolve:  Relative Change :    7.1397745367963702E-010
Loading user function library: [FlowSolve]...[FlowSolver_post]
SolverActivate: Solver time (CPU,REAL) for navier-stokes:   373.55  395.53 (s)
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: resultoutput
ResultOutputSolver: -------------------------------------
ResultOutputSolver: Working on mesh:
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
GenerateSaveMask: Number of active elements 15156 out of 15156
GenerateSaveMask: Number of geometry nodes 7560 out of 7560
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the vtu file: ./vtuoutputs/tg_sr_0528_run2_128np001_t0008.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
ResultOutputSolver: -------------------------------------
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: lower free surface
FreeSurfaceSolver (fs lower): Solving for free surface
FreeSurfaceSolver (fs lower): Using Dirichlet method for limitation
FreeSurfaceSolver (fs lower): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs lower): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs lower): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs lower): Mesh dimension: 3
FreeSurfaceSolver (fs lower): Size of problem: 504
FreeSurfaceSolver (fs lower): Memory allocations done
FreeSurfaceSolver (fs lower): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.3443E-12
       1 0.3443E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  963.42663     0.21707520E-10 ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662942143443
FreeSurfaceSolver (fs lower):  Relative Change :    2.1707520484854415E-011
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 45
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: upper free surface
FreeSurfaceSolver (fs upper): Solving for free surface
FreeSurfaceSolver (fs upper): Using Dirichlet method for limitation
FreeSurfaceSolver (fs upper): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs upper): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs upper): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs upper): Mesh dimension: 3
FreeSurfaceSolver (fs upper): Size of problem: 504
FreeSurfaceSolver (fs upper): Memory allocations done
FreeSurfaceSolver (fs upper): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.1975E-12
       1 0.1975E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  1255.2469     0.15338818E-11 ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749118186
FreeSurfaceSolver (fs upper):  Relative Change :    1.5338817583489879E-012
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./TG_SR_0528_Run2.result.0
SaveResult: Done writing results file
SaveResult: -----------------------------------------
MAIN: 
MAIN: -------------------------------------
MAIN: Time: 9/76:   2.002E-01
MAIN: Estimated time left:  7.5 hours
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: There seems to be 105 (out of 7560) limited heights!
StructuredMeshMapper:  Active coordinate mapping time:    3.1700000090495450E-004
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0071 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:    6.0699999994540121E-004
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.75537797E-01 0.12451783E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.13   96.18 (s)
FlowSolve: iter:    1 Assembly: (s)    2.14    2.14
FlowSolve: iter:    1 Solve:    (s)   92.13   92.13
FlowSolve:  Result Norm     :    7.5537796704219326E-002
FlowSolve:  Relative Change :    1.2451782783957847E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.75537183E-01 0.81199084E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.14   97.00 (s)
FlowSolve: iter:    2 Assembly: (s)    1.99    4.13
FlowSolve: iter:    2 Solve:    (s)   92.14  184.27
FlowSolve:  Result Norm     :    7.5537183346718342E-002
FlowSolve:  Relative Change :    8.1199084160312369E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=3) (NRM,RELC): ( 0.75536030E-01 0.15272173E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    94.48  101.38 (s)
FlowSolve: iter:    3 Assembly: (s)    1.99    6.12
FlowSolve: iter:    3 Solve:    (s)   94.48  278.74
FlowSolve:  Result Norm     :    7.5536029738606861E-002
FlowSolve:  Relative Change :    1.5272172848141171E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=4) (NRM,RELC): ( 0.75536030E-01 0.84711923E-09 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    93.13   97.72 (s)
FlowSolve: iter:    4 Assembly: (s)    1.87    7.99
FlowSolve: iter:    4 Solve:    (s)   93.13  371.87
FlowSolve:  Result Norm     :    7.5536029674618838E-002
FlowSolve:  Relative Change :    8.4711922855787321E-010
Loading user function library: [FlowSolve]...[FlowSolver_post]
SolverActivate: Solver time (CPU,REAL) for navier-stokes:   379.87  401.24 (s)
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: resultoutput
ResultOutputSolver: -------------------------------------
ResultOutputSolver: Working on mesh:
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
GenerateSaveMask: Number of active elements 15156 out of 15156
GenerateSaveMask: Number of geometry nodes 7560 out of 7560
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the vtu file: ./vtuoutputs/tg_sr_0528_run2_128np001_t0009.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
ResultOutputSolver: -------------------------------------
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: lower free surface
FreeSurfaceSolver (fs lower): Solving for free surface
FreeSurfaceSolver (fs lower): Using Dirichlet method for limitation
FreeSurfaceSolver (fs lower): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs lower): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs lower): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs lower): Mesh dimension: 3
FreeSurfaceSolver (fs lower): Size of problem: 504
FreeSurfaceSolver (fs lower): Memory allocations done
FreeSurfaceSolver (fs lower): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.4131E-12
       1 0.4131E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  963.42663     0.26048128E-10 ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662944652989
FreeSurfaceSolver (fs lower):  Relative Change :    2.6048127761517937E-011
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 61
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: upper free surface
FreeSurfaceSolver (fs upper): Solving for free surface
FreeSurfaceSolver (fs upper): Using Dirichlet method for limitation
FreeSurfaceSolver (fs upper): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs upper): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs upper): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs upper): Mesh dimension: 3
FreeSurfaceSolver (fs upper): Size of problem: 504
FreeSurfaceSolver (fs upper): Memory allocations done
FreeSurfaceSolver (fs upper): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.2370E-12
       1 0.2370E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  1255.2469     0.18401871E-11 ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749095087
FreeSurfaceSolver (fs upper):  Relative Change :    1.8401871496331668E-012
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./TG_SR_0528_Run2.result.0
SaveResult: Done writing results file
SaveResult: -----------------------------------------
MAIN: 
MAIN: -------------------------------------
MAIN: Time: 10/76:   2.003E-01
MAIN: Estimated time left:  7.5 hours
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: There seems to be 105 (out of 7560) limited heights!
StructuredMeshMapper:  Active coordinate mapping time:    0.0000000000000000
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0100 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:    8.2600000041566091E-004
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.75534901E-01 0.14941805E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    94.81   99.93 (s)
FlowSolve: iter:    1 Assembly: (s)    1.98    1.98
FlowSolve: iter:    1 Solve:    (s)   94.81   94.81
FlowSolve:  Result Norm     :    7.5534901038391278E-002
FlowSolve:  Relative Change :    1.4941805445070549E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.75534165E-01 0.97436762E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    90.50   96.56 (s)
FlowSolve: iter:    2 Assembly: (s)    1.98    3.97
FlowSolve: iter:    2 Solve:    (s)   90.50  185.31
FlowSolve:  Result Norm     :    7.5534165054361238E-002
FlowSolve:  Relative Change :    9.7436761750792934E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=3) (NRM,RELC): ( 0.75532781E-01 0.18326249E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    92.13   97.75 (s)
FlowSolve: iter:    3 Assembly: (s)    2.15    6.12
FlowSolve: iter:    3 Solve:    (s)   92.13  277.44
FlowSolve:  Result Norm     :    7.5532780809146022E-002
FlowSolve:  Relative Change :    1.8326248767443741E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=4) (NRM,RELC): ( 0.75532781E-01 0.99576783E-09 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    91.91   97.18 (s)
FlowSolve: iter:    4 Assembly: (s)    2.00    8.12
FlowSolve: iter:    4 Solve:    (s)   91.91  369.36
FlowSolve:  Result Norm     :    7.5532780733932908E-002
FlowSolve:  Relative Change :    9.9576783413546323E-010
Loading user function library: [FlowSolve]...[FlowSolver_post]
SolverActivate: Solver time (CPU,REAL) for navier-stokes:   377.48  399.65 (s)
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: resultoutput
ResultOutputSolver: -------------------------------------
ResultOutputSolver: Working on mesh:
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
GenerateSaveMask: Number of active elements 15156 out of 15156
GenerateSaveMask: Number of geometry nodes 7560 out of 7560
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the vtu file: ./vtuoutputs/tg_sr_0528_run2_128np001_t0010.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
ResultOutputSolver: -------------------------------------
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: lower free surface
FreeSurfaceSolver (fs lower): Solving for free surface
FreeSurfaceSolver (fs lower): Using Dirichlet method for limitation
FreeSurfaceSolver (fs lower): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs lower): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs lower): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs lower): Mesh dimension: 3
FreeSurfaceSolver (fs lower): Size of problem: 504
FreeSurfaceSolver (fs lower): Memory allocations done
FreeSurfaceSolver (fs lower): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.4957E-12
       1 0.4957E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  963.42663     0.31256290E-10 ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662947664303
FreeSurfaceSolver (fs lower):  Relative Change :    3.1256290080807734E-011
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 74
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: upper free surface
FreeSurfaceSolver (fs upper): Solving for free surface
FreeSurfaceSolver (fs upper): Using Dirichlet method for limitation
FreeSurfaceSolver (fs upper): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs upper): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs upper): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs upper): Mesh dimension: 3
FreeSurfaceSolver (fs upper): Size of problem: 504
FreeSurfaceSolver (fs upper): Memory allocations done
FreeSurfaceSolver (fs upper): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.2843E-12
       1 0.2843E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  1255.2469     0.22084419E-11 ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749067366
FreeSurfaceSolver (fs upper):  Relative Change :    2.2084419458975280E-012
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./TG_SR_0528_Run2.result.0
SaveResult: Done writing results file
SaveResult: -----------------------------------------
xcMAIN: 
MAIN: -------------------------------------
MAIN: Time: 11/76:   2.004E-01
MAIN: Estimated time left:  7.4 hours
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: There seems to be 105 (out of 7560) limited heights!
StructuredMeshMapper:  Active coordinate mapping time:    2.6600000001053559E-004
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0069 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:    5.9399999918241519E-004
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.75531426E-01 0.17929674E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    95.07  100.18 (s)
FlowSolve: iter:    1 Assembly: (s)    1.98    1.98
FlowSolve: iter:    1 Solve:    (s)   95.07   95.07
FlowSolve:  Result Norm     :    7.5531426467970508E-002
FlowSolve:  Relative Change :    1.7929673580319757E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.75530543E-01 0.11692099E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    91.87   97.04 (s)
FlowSolve: iter:    2 Assembly: (s)    2.25    4.23
FlowSolve: iter:    2 Solve:    (s)   91.87  186.94
FlowSolve:  Result Norm     :    7.5530543352192253E-002
FlowSolve:  Relative Change :    1.1692099332565435E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=3) (NRM,RELC): ( 0.75529967E-01 0.76315800E-05 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    88.47   94.45 (s)
FlowSolve: iter:    3 Assembly: (s)    2.00    6.24
FlowSolve: iter:    3 Solve:    (s)   88.47  275.41
FlowSolve:  Result Norm     :    7.5529966937004062E-002
FlowSolve:  Relative Change :    7.6315800481277634E-006
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           4
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=4) (NRM,RELC): ( 0.75528882E-01 0.14359772E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    89.00   95.37 (s)
FlowSolve: iter:    4 Assembly: (s)    1.99    8.23
FlowSolve: iter:    4 Solve:    (s)   89.00  364.41
FlowSolve:  Result Norm     :    7.5528882351719034E-002
FlowSolve:  Relative Change :    1.4359771574245167E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           5
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=5) (NRM,RELC): ( 0.75528882E-01 0.79795539E-09 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    87.58   93.12 (s)
FlowSolve: iter:    5 Assembly: (s)    2.15   10.39
FlowSolve: iter:    5 Solve:    (s)   87.58  451.99
FlowSolve:  Result Norm     :    7.5528882291450355E-002
FlowSolve:  Relative Change :    7.9795539247848669E-010
Loading user function library: [FlowSolve]...[FlowSolver_post]
SolverActivate: Solver time (CPU,REAL) for navier-stokes:   462.38  491.02 (s)
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: resultoutput
ResultOutputSolver: -------------------------------------
ResultOutputSolver: Working on mesh:
ResultOutputSolver: Dimension of mesh is: 3
ResultOutputSolver: Saving in unstructured VTK XML (.vtu) format
GenerateSaveMask: Number of active elements 15156 out of 15156
GenerateSaveMask: Number of geometry nodes 7560 out of 7560
VtuOutputSolver: Setting offset for boundary entities: 100
VtuOutputSolver: Writing the vtu file: ./vtuoutputs/tg_sr_0528_run2_128np001_t0011.vtu
AscBinWriteInit: Initializing buffered ascii/binary writing
ResultOutputSolver: -------------------------------------
Loading user function library: [ResultOutputSolve]...[ResultOutputSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: lower free surface
FreeSurfaceSolver (fs lower): Solving for free surface
FreeSurfaceSolver (fs lower): Using Dirichlet method for limitation
FreeSurfaceSolver (fs lower): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs lower): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs lower): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs lower): Mesh dimension: 3
FreeSurfaceSolver (fs lower): Size of problem: 504
FreeSurfaceSolver (fs lower): Memory allocations done
FreeSurfaceSolver (fs lower): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs lower): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 55736
FreeSurfaceSolver (fs lower): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.5948E-12
       1 0.5948E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  963.42663     0.37505471E-10 ) :: lower free surface
FreeSurfaceSolver (fs lower):  Result Norm   :    963.42662951277680
FreeSurfaceSolver (fs lower):  Relative Change :    3.7505471250092699E-011
FreeSurfaceSolver (fs lower): Assembly: (s)    0.04    0.04
FreeSurfaceSolver (fs lower):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs lower): Max/min values surface:-0.852410E+02/-0.715926E+03
FreeSurfaceSolver (fs lower): Number of surface nodes: 504
FreeSurfaceSolver (fs lower): Number of constrained points (lower limit): 35
FreeSurfaceSolver (fs lower): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs lower): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: upper free surface
FreeSurfaceSolver (fs upper): Solving for free surface
FreeSurfaceSolver (fs upper): Using Dirichlet method for limitation
FreeSurfaceSolver (fs upper): Using horizontal Eulerian Formulation
FreeSurfaceSolver (fs upper): Using residual squared-stabilized formulation.
FreeSurfaceSolver (fs upper): No Free Surface Orientation Vector found, assuming normal to z-axis
FreeSurfaceSolver (fs upper): Mesh dimension: 3
FreeSurfaceSolver (fs upper): Size of problem: 504
FreeSurfaceSolver (fs upper): Memory allocations done
FreeSurfaceSolver (fs upper): Non-linear Iteration 1 out of max. 100
FreeSurfaceSolver (fs upper): start assembly
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
FreeSurfaceSolver (fs upper): Assembly done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Linear System Preconditioning: ilu1
SolveLinearSystem: Parallel linear System Solver: iterative
SParIterSolver: Solving linear in parallel with iterative methods
IterSolver: Using iterative method: bicgstab
CRS_IncompleteLU: ILU(1) (Real), Performing Factorization:
CRS_IncompleteLU: ILU(1) (Real), NOF nonzeros:      4005
CRS_IncompleteLU: ILU(1) (Real), filling (%) :       128
CRS_IncompleteLU: ILU(1) (Real), Factorization ready at (s):     0.00
       1 0.3412E-12
       1 0.3412E-12
ComputeChange: NS (ITER=1) (NRM,RELC): (  1255.2469     0.26496956E-11 ) :: upper free surface
FreeSurfaceSolver (fs upper):  Result Norm   :    1255.2468749034106
FreeSurfaceSolver (fs upper):  Relative Change :    2.6496956024169545E-012
FreeSurfaceSolver (fs upper): Assembly: (s)    0.01    0.01
FreeSurfaceSolver (fs upper):  Solve:    (s)    0.00    0.00
FreeSurfaceSolver (fs upper): Max/min values surface: 0.163642E+03/ 0.102252E+02
FreeSurfaceSolver (fs upper): Number of surface nodes: 504
FreeSurfaceSolver (fs upper): Number of constrained points (lower limit): 0
FreeSurfaceSolver (fs upper): Number of constrained points (upper limit): 0
FreeSurfaceSolver (fs upper): Converged after1 iterations
Loading user function library: [FreeSurfaceSolver]...[FreeSurfaceSolver_post]
SaveResult: -----------------------------------------
SaveResult: Saving results to file: ./TG_SR_0528_Run2.result.0
SaveResult: Done writing results file
SaveResult: -----------------------------------------
MAIN: 
MAIN: -------------------------------------
MAIN: Time: 12/76:   2.005E-01
MAIN: Estimated time left:  8.9 hours
MAIN: -------------------------------------
MAIN: 
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: mapcoordinate
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Performing mapping on a structured mesh
StructuredMeshMapper: ---------------------------------------
StructuredMeshMapper: Defaulting "Recompute Stabilization" to True.
StructuredMeshMapper: Adjusting upper surface to maintain minimum height to: 0.1100E+02
StructuredMeshMapper: > Correct Surface < in case of intersecting upper and lower surface
StructuredMeshMapper: There seems to be 105 (out of 7560) limited heights!
StructuredMeshMapper:  Active coordinate mapping time:    4.4899999920744449E-004
MeshStabParams: Computing stabilization parameters
MeshStabParams: Elapsed REAL time:     0.0070 (s)
Loading user function library: [StructuredMeshMapper]...[StructuredMeshMapper_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: heightdepth
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane: Performing projection on a structured mesh
StructuredProjectToPlane: ------------------------------------------
StructuredProjectToPlane:  Projection time:    6.4500000007683411E-004
StructuredProjectToPlane: ------------------------------------------
Loading user function library: [StructuredProjectToPlane]...[StructuredProjectToPlane_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: normal vector
ComputeNormalSolver: Computing Normal Vector for Nodes
ComputeNormalSolver: End
Loading user function library: [ElmerIceSolvers]...[ComputeNormalSolver_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: fw
Update Periodic Nodes for: fwater 1: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 2: Start
UpdatePeriodicNodes: All Done
Update Periodic Nodes for: fwater 3: Start
UpdatePeriodicNodes: All Done
GetHydrostaticLoads: End
Loading user function library: [ElmerIceSolvers]...[GetHydrostaticLoads_post]
SingleSolver: Attempting to call solver
SingleSolver: Solver Equation string is: navier-stokes
FlowSolver: Solving the Navier-Stokes equations
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           1
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=1) (NRM,RELC): ( 0.75527257E-01 0.21514918E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    88.87   94.16 (s)
FlowSolve: iter:    1 Assembly: (s)    2.27    2.27
FlowSolve: iter:    1 Solve:    (s)   88.87   88.87
FlowSolve:  Result Norm     :    7.5527257311205118E-002
FlowSolve:  Relative Change :    2.1514918221957027E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           2
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
SolveLinearSystem: Calculating nodal loads
ComputeChange: NS (ITER=2) (NRM,RELC): ( 0.75526198E-01 0.14030081E-04 ) :: navier-stokes
SolveSystem: Linear system time (CPU,REAL) for flow solution:    90.83   96.81 (s)
FlowSolve: iter:    2 Assembly: (s)    1.98    4.25
FlowSolve: iter:    2 Solve:    (s)   90.83  179.70
FlowSolve:  Result Norm     :    7.5526197665074152E-002
FlowSolve:  Relative Change :    1.4030081352753916E-005
FlowSolve: 
FlowSolve: 
FlowSolve: -------------------------------------
FlowSolve:  NAVIER-STOKES ITERATION           3
FlowSolve: -------------------------------------
FlowSolve: 
FlowSolve: Starting Assembly...
FlowSolve: Assembly:
: .Saving bulk values for: navier-stokes
FlowSolve: Assembly done
DefUtils::DefaultDirichletBCs: Setting Dirichlet boundary conditions
EnforceDirichletConditions: Applying Dirichlet conditions using scaled diagonal
EnforceDirichletConditions: Dirichlet conditions enforced for dofs: 1885903
FlowSolve: Dirichlet conditions done
SolveLinearSystem: Assuming real valued linear system
SolveLinearSystem: Assuming parallel linear system
SolveLinearSystem: Parallel linear System Solver: direct
DirectSolver: Using direct method: mumps
